
WS2812-RGB-LED-Ring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004654  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08004768  08004768  00014768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004960  08004960  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004960  08004960  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004960  08004960  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004960  08004960  00014960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004964  08004964  00014964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000000c  08004974  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08004974  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008aba  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001785  00000000  00000000  00028aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  0002a278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002ac48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016740  00000000  00000000  0002b560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a206  00000000  00000000  00041ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084180  00000000  00000000  0004bea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0026  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c68  00000000  00000000  000d007c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800474c 	.word	0x0800474c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	0800474c 	.word	0x0800474c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <Set_LED>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
 8000d54:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	b2d9      	uxtb	r1, r3
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <Set_LED+0x54>)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	b2d9      	uxtb	r1, r3
 8000d66:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <Set_LED+0x54>)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	460a      	mov	r2, r1
 8000d70:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	b2d9      	uxtb	r1, r3
 8000d76:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <Set_LED+0x54>)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	460a      	mov	r2, r1
 8000d80:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2d9      	uxtb	r1, r3
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <Set_LED+0x54>)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	460a      	mov	r2, r1
 8000d90:	70da      	strb	r2, [r3, #3]
}
 8000d92:	bf00      	nop
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	2000006c 	.word	0x2000006c

08000da0 <Set_Brightness>:
void Set_Brightness (int brightness)  // 0-45
{
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if (brightness > 45) brightness = 45;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b2d      	cmp	r3, #45	; 0x2d
 8000dac:	dd01      	ble.n	8000db2 <Set_Brightness+0x12>
 8000dae:	232d      	movs	r3, #45	; 0x2d
 8000db0:	607b      	str	r3, [r7, #4]
	for (int i=0; i<MAX_LED; i++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	e05f      	b.n	8000e78 <Set_Brightness+0xd8>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8000db8:	4a35      	ldr	r2, [pc, #212]	; (8000e90 <Set_Brightness+0xf0>)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000dc0:	4a34      	ldr	r2, [pc, #208]	; (8000e94 <Set_Brightness+0xf4>)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1; j<4; j++)
 8000dc8:	2301      	movs	r3, #1
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	e04e      	b.n	8000e6c <Set_Brightness+0xcc>
		{
			float angle = 90-brightness;  // in degrees
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff ff63 	bl	8000ca0 <__aeabi_i2f>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180;  // in rad
 8000dde:	68f8      	ldr	r0, [r7, #12]
 8000de0:	f7ff fb1a 	bl	8000418 <__aeabi_f2d>
 8000de4:	a328      	add	r3, pc, #160	; (adr r3, 8000e88 <Set_Brightness+0xe8>)
 8000de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dea:	f7ff fb6d 	bl	80004c8 <__aeabi_dmul>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	4610      	mov	r0, r2
 8000df4:	4619      	mov	r1, r3
 8000df6:	f04f 0200 	mov.w	r2, #0
 8000dfa:	4b27      	ldr	r3, [pc, #156]	; (8000e98 <Set_Brightness+0xf8>)
 8000dfc:	f7ff fc8e 	bl	800071c <__aeabi_ddiv>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4610      	mov	r0, r2
 8000e06:	4619      	mov	r1, r3
 8000e08:	f7ff fe40 	bl	8000a8c <__aeabi_d2f>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8000e10:	4a1f      	ldr	r2, [pc, #124]	; (8000e90 <Set_Brightness+0xf0>)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	441a      	add	r2, r3
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fae8 	bl	80003f4 <__aeabi_i2d>
 8000e24:	4604      	mov	r4, r0
 8000e26:	460d      	mov	r5, r1
 8000e28:	68f8      	ldr	r0, [r7, #12]
 8000e2a:	f7ff faf5 	bl	8000418 <__aeabi_f2d>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f002 fc59 	bl	80036ec <tan>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	4620      	mov	r0, r4
 8000e40:	4629      	mov	r1, r5
 8000e42:	f7ff fc6b 	bl	800071c <__aeabi_ddiv>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f7ff fdfd 	bl	8000a4c <__aeabi_d2uiz>
 8000e52:	4603      	mov	r3, r0
 8000e54:	b2d9      	uxtb	r1, r3
 8000e56:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <Set_Brightness+0xf4>)
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	441a      	add	r2, r3
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	4413      	add	r3, r2
 8000e62:	460a      	mov	r2, r1
 8000e64:	701a      	strb	r2, [r3, #0]
		for (int j=1; j<4; j++)
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	ddad      	ble.n	8000dce <Set_Brightness+0x2e>
	for (int i=0; i<MAX_LED; i++)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	2b07      	cmp	r3, #7
 8000e7c:	dd9c      	ble.n	8000db8 <Set_Brightness+0x18>
		}
	}

#endif

}
 8000e7e:	bf00      	nop
 8000e80:	bf00      	nop
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bdb0      	pop	{r4, r5, r7, pc}
 8000e88:	53c8d4f1 	.word	0x53c8d4f1
 8000e8c:	400921fb 	.word	0x400921fb
 8000e90:	2000006c 	.word	0x2000006c
 8000e94:	2000008c 	.word	0x2000008c
 8000e98:	40668000 	.word	0x40668000

08000e9c <WS2812_Send>:
void WS2812_Send (void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	e036      	b.n	8000f1a <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8000eac:	4a2a      	ldr	r2, [pc, #168]	; (8000f58 <WS2812_Send+0xbc>)
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	785b      	ldrb	r3, [r3, #1]
 8000eb6:	041a      	lsls	r2, r3, #16
 8000eb8:	4927      	ldr	r1, [pc, #156]	; (8000f58 <WS2812_Send+0xbc>)
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	789b      	ldrb	r3, [r3, #2]
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	4924      	ldr	r1, [pc, #144]	; (8000f58 <WS2812_Send+0xbc>)
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	440b      	add	r3, r1
 8000ece:	78db      	ldrb	r3, [r3, #3]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	607b      	str	r3, [r7, #4]
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
#endif

		for (int i=23; i>=0; i--)
 8000ed4:	2317      	movs	r3, #23
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	e019      	b.n	8000f0e <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 8000eda:	2201      	movs	r2, #1
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d005      	beq.n	8000ef8 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 60;  // 2/3 of 90
 8000eec:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <WS2812_Send+0xc0>)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	213c      	movs	r1, #60	; 0x3c
 8000ef2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ef6:	e004      	b.n	8000f02 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 30;  // 1/3 of 90
 8000ef8:	4a18      	ldr	r2, [pc, #96]	; (8000f5c <WS2812_Send+0xc0>)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	211e      	movs	r1, #30
 8000efe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3301      	adds	r3, #1
 8000f06:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dae2      	bge.n	8000eda <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	3301      	adds	r3, #1
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	2b07      	cmp	r3, #7
 8000f1e:	ddc5      	ble.n	8000eac <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	e00a      	b.n	8000f3c <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8000f26:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <WS2812_Send+0xc0>)
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	3301      	adds	r3, #1
 8000f34:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	2b31      	cmp	r3, #49	; 0x31
 8000f40:	ddf1      	ble.n	8000f26 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <WS2812_Send+0xc0>)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <WS2812_Send+0xc4>)
 8000f4c:	f001 fc46 	bl	80027dc <HAL_TIM_PWM_Start_DMA>
//	while (!datasentflag){};
//	datasentflag = 0;
}
 8000f50:	bf00      	nop
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2000008c 	.word	0x2000008c
 8000f5c:	200000ac 	.word	0x200000ac
 8000f60:	20000290 	.word	0x20000290

08000f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f6a:	f000 faa1 	bl	80014b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6e:	f000 f859 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f72:	f000 f95b 	bl	800122c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f76:	f000 f93b 	bl	80011f0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000f7a:	f000 f899 	bl	80010b0 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Set_LED(0, 255, 0, 0);
 8000f7e:	2300      	movs	r3, #0
 8000f80:	2200      	movs	r2, #0
 8000f82:	21ff      	movs	r1, #255	; 0xff
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff fedf 	bl	8000d48 <Set_LED>
   Set_LED(1, 0, 255, 0);
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	22ff      	movs	r2, #255	; 0xff
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2001      	movs	r0, #1
 8000f92:	f7ff fed9 	bl	8000d48 <Set_LED>
   Set_LED(2, 0, 0, 255);
 8000f96:	23ff      	movs	r3, #255	; 0xff
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	f7ff fed3 	bl	8000d48 <Set_LED>

   Set_LED(3, 46, 89, 128);
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	2259      	movs	r2, #89	; 0x59
 8000fa6:	212e      	movs	r1, #46	; 0x2e
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f7ff fecd 	bl	8000d48 <Set_LED>

   Set_LED(4, 156, 233, 100);
 8000fae:	2364      	movs	r3, #100	; 0x64
 8000fb0:	22e9      	movs	r2, #233	; 0xe9
 8000fb2:	219c      	movs	r1, #156	; 0x9c
 8000fb4:	2004      	movs	r0, #4
 8000fb6:	f7ff fec7 	bl	8000d48 <Set_LED>
   Set_LED(5, 102, 0, 235);
 8000fba:	23eb      	movs	r3, #235	; 0xeb
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2166      	movs	r1, #102	; 0x66
 8000fc0:	2005      	movs	r0, #5
 8000fc2:	f7ff fec1 	bl	8000d48 <Set_LED>
   Set_LED(6, 47, 38, 77);
 8000fc6:	234d      	movs	r3, #77	; 0x4d
 8000fc8:	2226      	movs	r2, #38	; 0x26
 8000fca:	212f      	movs	r1, #47	; 0x2f
 8000fcc:	2006      	movs	r0, #6
 8000fce:	f7ff febb 	bl	8000d48 <Set_LED>

   Set_LED(7, 255, 200, 0);
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	22c8      	movs	r2, #200	; 0xc8
 8000fd6:	21ff      	movs	r1, #255	; 0xff
 8000fd8:	2007      	movs	r0, #7
 8000fda:	f7ff feb5 	bl	8000d48 <Set_LED>
  while (1)
  {
	  for (int i=0; i<46; i++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	e00a      	b.n	8000ffa <main+0x96>
	  {
		  Set_Brightness(i);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff fedb 	bl	8000da0 <Set_Brightness>
		  WS2812_Send();
 8000fea:	f7ff ff57 	bl	8000e9c <WS2812_Send>
		  HAL_Delay (50);
 8000fee:	2032      	movs	r0, #50	; 0x32
 8000ff0:	f000 fac0 	bl	8001574 <HAL_Delay>
	  for (int i=0; i<46; i++)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b2d      	cmp	r3, #45	; 0x2d
 8000ffe:	ddf1      	ble.n	8000fe4 <main+0x80>
	  }

	  for (int i=45; i>=0; i--)
 8001000:	232d      	movs	r3, #45	; 0x2d
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	e00a      	b.n	800101c <main+0xb8>
	  {
		  Set_Brightness(i);
 8001006:	6838      	ldr	r0, [r7, #0]
 8001008:	f7ff feca 	bl	8000da0 <Set_Brightness>
		  WS2812_Send();
 800100c:	f7ff ff46 	bl	8000e9c <WS2812_Send>
		  HAL_Delay (50);
 8001010:	2032      	movs	r0, #50	; 0x32
 8001012:	f000 faaf 	bl	8001574 <HAL_Delay>
	  for (int i=45; i>=0; i--)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	3b01      	subs	r3, #1
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	daf1      	bge.n	8001006 <main+0xa2>
	  for (int i=0; i<46; i++)
 8001022:	e7dc      	b.n	8000fde <main+0x7a>

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b090      	sub	sp, #64	; 0x40
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 0318 	add.w	r3, r7, #24
 800102e:	2228      	movs	r2, #40	; 0x28
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f002 fb52 	bl	80036dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001046:	2301      	movs	r3, #1
 8001048:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800104a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800104e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001054:	2301      	movs	r3, #1
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001058:	2302      	movs	r3, #2
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001062:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001068:	f107 0318 	add.w	r3, r7, #24
 800106c:	4618      	mov	r0, r3
 800106e:	f000 ff25 	bl	8001ebc <HAL_RCC_OscConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001078:	f000 f906 	bl	8001288 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107c:	230f      	movs	r3, #15
 800107e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001080:	2302      	movs	r3, #2
 8001082:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800108c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2102      	movs	r1, #2
 8001096:	4618      	mov	r0, r3
 8001098:	f001 f990 	bl	80023bc <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010a2:	f000 f8f1 	bl	8001288 <Error_Handler>
  }
}
 80010a6:	bf00      	nop
 80010a8:	3740      	adds	r7, #64	; 0x40
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b096      	sub	sp, #88	; 0x58
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]
 80010de:	615a      	str	r2, [r3, #20]
 80010e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2220      	movs	r2, #32
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 faf7 	bl	80036dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ee:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <MX_TIM1_Init+0x138>)
 80010f0:	4a3e      	ldr	r2, [pc, #248]	; (80011ec <MX_TIM1_Init+0x13c>)
 80010f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010f4:	4b3c      	ldr	r3, [pc, #240]	; (80011e8 <MX_TIM1_Init+0x138>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fa:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <MX_TIM1_Init+0x138>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 72;
 8001100:	4b39      	ldr	r3, [pc, #228]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001102:	2248      	movs	r2, #72	; 0x48
 8001104:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001106:	4b38      	ldr	r3, [pc, #224]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800110c:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <MX_TIM1_Init+0x138>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001112:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001118:	4833      	ldr	r0, [pc, #204]	; (80011e8 <MX_TIM1_Init+0x138>)
 800111a:	f001 fab7 	bl	800268c <HAL_TIM_Base_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001124:	f000 f8b0 	bl	8001288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001128:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800112e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001132:	4619      	mov	r1, r3
 8001134:	482c      	ldr	r0, [pc, #176]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001136:	f001 fda9 	bl	8002c8c <HAL_TIM_ConfigClockSource>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001140:	f000 f8a2 	bl	8001288 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001144:	4828      	ldr	r0, [pc, #160]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001146:	f001 faf0 	bl	800272a <HAL_TIM_PWM_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001150:	f000 f89a 	bl	8001288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800115c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001160:	4619      	mov	r1, r3
 8001162:	4821      	ldr	r0, [pc, #132]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001164:	f002 f9e6 	bl	8003534 <HAL_TIMEx_MasterConfigSynchronization>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800116e:	f000 f88b 	bl	8001288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001172:	2360      	movs	r3, #96	; 0x60
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800117e:	2300      	movs	r3, #0
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	2200      	movs	r2, #0
 8001194:	4619      	mov	r1, r3
 8001196:	4814      	ldr	r0, [pc, #80]	; (80011e8 <MX_TIM1_Init+0x138>)
 8001198:	f001 fcba 	bl	8002b10 <HAL_TIM_PWM_ConfigChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80011a2:	f000 f871 	bl	8001288 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4619      	mov	r1, r3
 80011c8:	4807      	ldr	r0, [pc, #28]	; (80011e8 <MX_TIM1_Init+0x138>)
 80011ca:	f002 fa11 	bl	80035f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80011d4:	f000 f858 	bl	8001288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011d8:	4803      	ldr	r0, [pc, #12]	; (80011e8 <MX_TIM1_Init+0x138>)
 80011da:	f000 f8d7 	bl	800138c <HAL_TIM_MspPostInit>

}
 80011de:	bf00      	nop
 80011e0:	3758      	adds	r7, #88	; 0x58
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000290 	.word	0x20000290
 80011ec:	40012c00 	.word	0x40012c00

080011f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_DMA_Init+0x38>)
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <MX_DMA_Init+0x38>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6153      	str	r3, [r2, #20]
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_DMA_Init+0x38>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	200c      	movs	r0, #12
 8001214:	f000 faa9 	bl	800176a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001218:	200c      	movs	r0, #12
 800121a:	f000 fac2 	bl	80017a2 <HAL_NVIC_EnableIRQ>

}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000

0800122c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_GPIO_Init+0x58>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	4a13      	ldr	r2, [pc, #76]	; (8001284 <MX_GPIO_Init+0x58>)
 8001238:	f043 0320 	orr.w	r3, r3, #32
 800123c:	6193      	str	r3, [r2, #24]
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_GPIO_Init+0x58>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	f003 0320 	and.w	r3, r3, #32
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_GPIO_Init+0x58>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <MX_GPIO_Init+0x58>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	6193      	str	r3, [r2, #24]
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_GPIO_Init+0x58>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_GPIO_Init+0x58>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4a07      	ldr	r2, [pc, #28]	; (8001284 <MX_GPIO_Init+0x58>)
 8001268:	f043 0308 	orr.w	r3, r3, #8
 800126c:	6193      	str	r3, [r2, #24]
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <MX_GPIO_Init+0x58>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]

}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	40021000 	.word	0x40021000

08001288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001290:	e7fe      	b.n	8001290 <Error_Handler+0x8>
	...

08001294 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800129a:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_MspInit+0x5c>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <HAL_MspInit+0x5c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6193      	str	r3, [r2, #24]
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_MspInit+0x5c>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_MspInit+0x5c>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <HAL_MspInit+0x5c>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012bc:	61d3      	str	r3, [r2, #28]
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_MspInit+0x5c>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_MspInit+0x60>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HAL_MspInit+0x60>)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010000 	.word	0x40010000

080012f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_TIM_Base_MspInit+0x84>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d133      	bne.n	8001372 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800130a:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <HAL_TIM_Base_MspInit+0x88>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <HAL_TIM_Base_MspInit+0x88>)
 8001310:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001314:	6193      	str	r3, [r2, #24]
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <HAL_TIM_Base_MspInit+0x88>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_TIM_Base_MspInit+0x8c>)
 8001324:	4a18      	ldr	r2, [pc, #96]	; (8001388 <HAL_TIM_Base_MspInit+0x90>)
 8001326:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <HAL_TIM_Base_MspInit+0x8c>)
 800132a:	2210      	movs	r2, #16
 800132c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_TIM_Base_MspInit+0x8c>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <HAL_TIM_Base_MspInit+0x8c>)
 8001336:	2280      	movs	r2, #128	; 0x80
 8001338:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_TIM_Base_MspInit+0x8c>)
 800133c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001340:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_TIM_Base_MspInit+0x8c>)
 8001344:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001348:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_TIM_Base_MspInit+0x8c>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <HAL_TIM_Base_MspInit+0x8c>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001356:	480b      	ldr	r0, [pc, #44]	; (8001384 <HAL_TIM_Base_MspInit+0x8c>)
 8001358:	f000 fa3e 	bl	80017d8 <HAL_DMA_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001362:	f7ff ff91 	bl	8001288 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a06      	ldr	r2, [pc, #24]	; (8001384 <HAL_TIM_Base_MspInit+0x8c>)
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
 800136c:	4a05      	ldr	r2, [pc, #20]	; (8001384 <HAL_TIM_Base_MspInit+0x8c>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40012c00 	.word	0x40012c00
 8001380:	40021000 	.word	0x40021000
 8001384:	20000028 	.word	0x20000028
 8001388:	4002001c 	.word	0x4002001c

0800138c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <HAL_TIM_MspPostInit+0x5c>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d118      	bne.n	80013de <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_TIM_MspPostInit+0x60>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <HAL_TIM_MspPostInit+0x60>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_TIM_MspPostInit+0x60>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2302      	movs	r3, #2
 80013d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <HAL_TIM_MspPostInit+0x64>)
 80013da:	f000 fbeb 	bl	8001bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3720      	adds	r7, #32
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40012c00 	.word	0x40012c00
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40010800 	.word	0x40010800

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <NMI_Handler+0x4>

080013fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr

0800142a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143a:	f000 f87f 	bl	800153c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <DMA1_Channel2_IRQHandler+0x10>)
 800144a:	f000 fa7f 	bl	800194c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000028 	.word	0x20000028

08001458 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001464:	480c      	ldr	r0, [pc, #48]	; (8001498 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001466:	490d      	ldr	r1, [pc, #52]	; (800149c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001468:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800147c:	4c0a      	ldr	r4, [pc, #40]	; (80014a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800148a:	f7ff ffe5 	bl	8001458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800148e:	f002 f901 	bl	8003694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001492:	f7ff fd67 	bl	8000f64 <main>
  bx lr
 8001496:	4770      	bx	lr
  ldr r0, =_sdata
 8001498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800149c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014a0:	08004968 	.word	0x08004968
  ldr r2, =_sbss
 80014a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014a8:	200002dc 	.word	0x200002dc

080014ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC1_2_IRQHandler>
	...

080014b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_Init+0x28>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <HAL_Init+0x28>)
 80014ba:	f043 0310 	orr.w	r3, r3, #16
 80014be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c0:	2003      	movs	r0, #3
 80014c2:	f000 f947 	bl	8001754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c6:	200f      	movs	r0, #15
 80014c8:	f000 f808 	bl	80014dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014cc:	f7ff fee2 	bl	8001294 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40022000 	.word	0x40022000

080014dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_InitTick+0x54>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_InitTick+0x58>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f95f 	bl	80017be <HAL_SYSTICK_Config>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e00e      	b.n	8001528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	d80a      	bhi.n	8001526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001510:	2200      	movs	r2, #0
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f000 f927 	bl	800176a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800151c:	4a06      	ldr	r2, [pc, #24]	; (8001538 <HAL_InitTick+0x5c>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000000 	.word	0x20000000
 8001534:	20000008 	.word	0x20000008
 8001538:	20000004 	.word	0x20000004

0800153c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_IncTick+0x1c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_IncTick+0x20>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a03      	ldr	r2, [pc, #12]	; (800155c <HAL_IncTick+0x20>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	20000008 	.word	0x20000008
 800155c:	200002d8 	.word	0x200002d8

08001560 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;
 8001564:	4b02      	ldr	r3, [pc, #8]	; (8001570 <HAL_GetTick+0x10>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	4618      	mov	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	200002d8 	.word	0x200002d8

08001574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff fff0 	bl	8001560 <HAL_GetTick>
 8001580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158c:	d005      	beq.n	800159a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_Delay+0x44>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800159a:	bf00      	nop
 800159c:	f7ff ffe0 	bl	8001560 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d8f7      	bhi.n	800159c <HAL_Delay+0x28>
  {
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000008 	.word	0x20000008

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4906      	ldr	r1, [pc, #24]	; (8001654 <__NVIC_EnableIRQ+0x34>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	e000e100 	.word	0xe000e100

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001720:	d301      	bcc.n	8001726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001722:	2301      	movs	r3, #1
 8001724:	e00f      	b.n	8001746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <SysTick_Config+0x40>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800172e:	210f      	movs	r1, #15
 8001730:	f04f 30ff 	mov.w	r0, #4294967295
 8001734:	f7ff ff90 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <SysTick_Config+0x40>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173e:	4b04      	ldr	r3, [pc, #16]	; (8001750 <SysTick_Config+0x40>)
 8001740:	2207      	movs	r2, #7
 8001742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	e000e010 	.word	0xe000e010

08001754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ff2d 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800177c:	f7ff ff42 	bl	8001604 <__NVIC_GetPriorityGrouping>
 8001780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	6978      	ldr	r0, [r7, #20]
 8001788:	f7ff ff90 	bl	80016ac <NVIC_EncodePriority>
 800178c:	4602      	mov	r2, r0
 800178e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff5f 	bl	8001658 <__NVIC_SetPriority>
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ff35 	bl	8001620 <__NVIC_EnableIRQ>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffa2 	bl	8001710 <SysTick_Config>
 80017cc:	4603      	mov	r3, r0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e043      	b.n	8001876 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <HAL_DMA_Init+0xa8>)
 80017f6:	4413      	add	r3, r2
 80017f8:	4a22      	ldr	r2, [pc, #136]	; (8001884 <HAL_DMA_Init+0xac>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	091b      	lsrs	r3, r3, #4
 8001800:	009a      	lsls	r2, r3, #2
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <HAL_DMA_Init+0xb0>)
 800180a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2202      	movs	r2, #2
 8001810:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001822:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001826:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001830:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800183c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001848:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	bffdfff8 	.word	0xbffdfff8
 8001884:	cccccccd 	.word	0xcccccccd
 8001888:	40020000 	.word	0x40020000

0800188c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
 8001898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_DMA_Start_IT+0x20>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e04a      	b.n	8001942 <HAL_DMA_Start_IT+0xb6>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d13a      	bne.n	8001934 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2202      	movs	r2, #2
 80018c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 f938 	bl	8001b58 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d008      	beq.n	8001902 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 020e 	orr.w	r2, r2, #14
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	e00f      	b.n	8001922 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0204 	bic.w	r2, r2, #4
 8001910:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 020a 	orr.w	r2, r2, #10
 8001920:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 0201 	orr.w	r2, r2, #1
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	e005      	b.n	8001940 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800193c:	2302      	movs	r3, #2
 800193e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001940:	7dfb      	ldrb	r3, [r7, #23]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	2204      	movs	r2, #4
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d04f      	beq.n	8001a14 <HAL_DMA_IRQHandler+0xc8>
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d04a      	beq.n	8001a14 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0320 	and.w	r3, r3, #32
 8001988:	2b00      	cmp	r3, #0
 800198a:	d107      	bne.n	800199c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0204 	bic.w	r2, r2, #4
 800199a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a66      	ldr	r2, [pc, #408]	; (8001b3c <HAL_DMA_IRQHandler+0x1f0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d029      	beq.n	80019fa <HAL_DMA_IRQHandler+0xae>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a65      	ldr	r2, [pc, #404]	; (8001b40 <HAL_DMA_IRQHandler+0x1f4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d022      	beq.n	80019f6 <HAL_DMA_IRQHandler+0xaa>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a63      	ldr	r2, [pc, #396]	; (8001b44 <HAL_DMA_IRQHandler+0x1f8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d01a      	beq.n	80019f0 <HAL_DMA_IRQHandler+0xa4>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a62      	ldr	r2, [pc, #392]	; (8001b48 <HAL_DMA_IRQHandler+0x1fc>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d012      	beq.n	80019ea <HAL_DMA_IRQHandler+0x9e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a60      	ldr	r2, [pc, #384]	; (8001b4c <HAL_DMA_IRQHandler+0x200>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00a      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x98>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a5f      	ldr	r2, [pc, #380]	; (8001b50 <HAL_DMA_IRQHandler+0x204>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d102      	bne.n	80019de <HAL_DMA_IRQHandler+0x92>
 80019d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019dc:	e00e      	b.n	80019fc <HAL_DMA_IRQHandler+0xb0>
 80019de:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019e2:	e00b      	b.n	80019fc <HAL_DMA_IRQHandler+0xb0>
 80019e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019e8:	e008      	b.n	80019fc <HAL_DMA_IRQHandler+0xb0>
 80019ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019ee:	e005      	b.n	80019fc <HAL_DMA_IRQHandler+0xb0>
 80019f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f4:	e002      	b.n	80019fc <HAL_DMA_IRQHandler+0xb0>
 80019f6:	2340      	movs	r3, #64	; 0x40
 80019f8:	e000      	b.n	80019fc <HAL_DMA_IRQHandler+0xb0>
 80019fa:	2304      	movs	r3, #4
 80019fc:	4a55      	ldr	r2, [pc, #340]	; (8001b54 <HAL_DMA_IRQHandler+0x208>)
 80019fe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 8094 	beq.w	8001b32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a12:	e08e      	b.n	8001b32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	2202      	movs	r2, #2
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d056      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x186>
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d051      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0320 	and.w	r3, r3, #32
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10b      	bne.n	8001a54 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 020a 	bic.w	r2, r2, #10
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a38      	ldr	r2, [pc, #224]	; (8001b3c <HAL_DMA_IRQHandler+0x1f0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d029      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0x166>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a37      	ldr	r2, [pc, #220]	; (8001b40 <HAL_DMA_IRQHandler+0x1f4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d022      	beq.n	8001aae <HAL_DMA_IRQHandler+0x162>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a35      	ldr	r2, [pc, #212]	; (8001b44 <HAL_DMA_IRQHandler+0x1f8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d01a      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x15c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a34      	ldr	r2, [pc, #208]	; (8001b48 <HAL_DMA_IRQHandler+0x1fc>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d012      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0x156>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a32      	ldr	r2, [pc, #200]	; (8001b4c <HAL_DMA_IRQHandler+0x200>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00a      	beq.n	8001a9c <HAL_DMA_IRQHandler+0x150>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a31      	ldr	r2, [pc, #196]	; (8001b50 <HAL_DMA_IRQHandler+0x204>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d102      	bne.n	8001a96 <HAL_DMA_IRQHandler+0x14a>
 8001a90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a94:	e00e      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x168>
 8001a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a9a:	e00b      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x168>
 8001a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa0:	e008      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x168>
 8001aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa6:	e005      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x168>
 8001aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aac:	e002      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x168>
 8001aae:	2320      	movs	r3, #32
 8001ab0:	e000      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x168>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	4a27      	ldr	r2, [pc, #156]	; (8001b54 <HAL_DMA_IRQHandler+0x208>)
 8001ab6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d034      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ad0:	e02f      	b.n	8001b32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2208      	movs	r2, #8
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d028      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x1e8>
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d023      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 020e 	bic.w	r2, r2, #14
 8001afa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	4798      	blx	r3
    }
  }
  return;
 8001b32:	bf00      	nop
 8001b34:	bf00      	nop
}
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40020008 	.word	0x40020008
 8001b40:	4002001c 	.word	0x4002001c
 8001b44:	40020030 	.word	0x40020030
 8001b48:	40020044 	.word	0x40020044
 8001b4c:	40020058 	.word	0x40020058
 8001b50:	4002006c 	.word	0x4002006c
 8001b54:	40020000 	.word	0x40020000

08001b58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6e:	2101      	movs	r1, #1
 8001b70:	fa01 f202 	lsl.w	r2, r1, r2
 8001b74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b10      	cmp	r3, #16
 8001b84:	d108      	bne.n	8001b98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b96:	e007      	b.n	8001ba8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	60da      	str	r2, [r3, #12]
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
	...

08001bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b08b      	sub	sp, #44	; 0x2c
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc6:	e169      	b.n	8001e9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	f040 8158 	bne.w	8001e96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4a9a      	ldr	r2, [pc, #616]	; (8001e54 <HAL_GPIO_Init+0x2a0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d05e      	beq.n	8001cae <HAL_GPIO_Init+0xfa>
 8001bf0:	4a98      	ldr	r2, [pc, #608]	; (8001e54 <HAL_GPIO_Init+0x2a0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d875      	bhi.n	8001ce2 <HAL_GPIO_Init+0x12e>
 8001bf6:	4a98      	ldr	r2, [pc, #608]	; (8001e58 <HAL_GPIO_Init+0x2a4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d058      	beq.n	8001cae <HAL_GPIO_Init+0xfa>
 8001bfc:	4a96      	ldr	r2, [pc, #600]	; (8001e58 <HAL_GPIO_Init+0x2a4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d86f      	bhi.n	8001ce2 <HAL_GPIO_Init+0x12e>
 8001c02:	4a96      	ldr	r2, [pc, #600]	; (8001e5c <HAL_GPIO_Init+0x2a8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d052      	beq.n	8001cae <HAL_GPIO_Init+0xfa>
 8001c08:	4a94      	ldr	r2, [pc, #592]	; (8001e5c <HAL_GPIO_Init+0x2a8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d869      	bhi.n	8001ce2 <HAL_GPIO_Init+0x12e>
 8001c0e:	4a94      	ldr	r2, [pc, #592]	; (8001e60 <HAL_GPIO_Init+0x2ac>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d04c      	beq.n	8001cae <HAL_GPIO_Init+0xfa>
 8001c14:	4a92      	ldr	r2, [pc, #584]	; (8001e60 <HAL_GPIO_Init+0x2ac>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d863      	bhi.n	8001ce2 <HAL_GPIO_Init+0x12e>
 8001c1a:	4a92      	ldr	r2, [pc, #584]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d046      	beq.n	8001cae <HAL_GPIO_Init+0xfa>
 8001c20:	4a90      	ldr	r2, [pc, #576]	; (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d85d      	bhi.n	8001ce2 <HAL_GPIO_Init+0x12e>
 8001c26:	2b12      	cmp	r3, #18
 8001c28:	d82a      	bhi.n	8001c80 <HAL_GPIO_Init+0xcc>
 8001c2a:	2b12      	cmp	r3, #18
 8001c2c:	d859      	bhi.n	8001ce2 <HAL_GPIO_Init+0x12e>
 8001c2e:	a201      	add	r2, pc, #4	; (adr r2, 8001c34 <HAL_GPIO_Init+0x80>)
 8001c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c34:	08001caf 	.word	0x08001caf
 8001c38:	08001c89 	.word	0x08001c89
 8001c3c:	08001c9b 	.word	0x08001c9b
 8001c40:	08001cdd 	.word	0x08001cdd
 8001c44:	08001ce3 	.word	0x08001ce3
 8001c48:	08001ce3 	.word	0x08001ce3
 8001c4c:	08001ce3 	.word	0x08001ce3
 8001c50:	08001ce3 	.word	0x08001ce3
 8001c54:	08001ce3 	.word	0x08001ce3
 8001c58:	08001ce3 	.word	0x08001ce3
 8001c5c:	08001ce3 	.word	0x08001ce3
 8001c60:	08001ce3 	.word	0x08001ce3
 8001c64:	08001ce3 	.word	0x08001ce3
 8001c68:	08001ce3 	.word	0x08001ce3
 8001c6c:	08001ce3 	.word	0x08001ce3
 8001c70:	08001ce3 	.word	0x08001ce3
 8001c74:	08001ce3 	.word	0x08001ce3
 8001c78:	08001c91 	.word	0x08001c91
 8001c7c:	08001ca5 	.word	0x08001ca5
 8001c80:	4a79      	ldr	r2, [pc, #484]	; (8001e68 <HAL_GPIO_Init+0x2b4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d013      	beq.n	8001cae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c86:	e02c      	b.n	8001ce2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	623b      	str	r3, [r7, #32]
          break;
 8001c8e:	e029      	b.n	8001ce4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	3304      	adds	r3, #4
 8001c96:	623b      	str	r3, [r7, #32]
          break;
 8001c98:	e024      	b.n	8001ce4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	3308      	adds	r3, #8
 8001ca0:	623b      	str	r3, [r7, #32]
          break;
 8001ca2:	e01f      	b.n	8001ce4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	330c      	adds	r3, #12
 8001caa:	623b      	str	r3, [r7, #32]
          break;
 8001cac:	e01a      	b.n	8001ce4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	623b      	str	r3, [r7, #32]
          break;
 8001cba:	e013      	b.n	8001ce4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d105      	bne.n	8001cd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	611a      	str	r2, [r3, #16]
          break;
 8001cce:	e009      	b.n	8001ce4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	615a      	str	r2, [r3, #20]
          break;
 8001cda:	e003      	b.n	8001ce4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	623b      	str	r3, [r7, #32]
          break;
 8001ce0:	e000      	b.n	8001ce4 <HAL_GPIO_Init+0x130>
          break;
 8001ce2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	2bff      	cmp	r3, #255	; 0xff
 8001ce8:	d801      	bhi.n	8001cee <HAL_GPIO_Init+0x13a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	e001      	b.n	8001cf2 <HAL_GPIO_Init+0x13e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	2bff      	cmp	r3, #255	; 0xff
 8001cf8:	d802      	bhi.n	8001d00 <HAL_GPIO_Init+0x14c>
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	e002      	b.n	8001d06 <HAL_GPIO_Init+0x152>
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	3b08      	subs	r3, #8
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	210f      	movs	r1, #15
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	401a      	ands	r2, r3
 8001d18:	6a39      	ldr	r1, [r7, #32]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	431a      	orrs	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 80b1 	beq.w	8001e96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d34:	4b4d      	ldr	r3, [pc, #308]	; (8001e6c <HAL_GPIO_Init+0x2b8>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4a4c      	ldr	r2, [pc, #304]	; (8001e6c <HAL_GPIO_Init+0x2b8>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6193      	str	r3, [r2, #24]
 8001d40:	4b4a      	ldr	r3, [pc, #296]	; (8001e6c <HAL_GPIO_Init+0x2b8>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d4c:	4a48      	ldr	r2, [pc, #288]	; (8001e70 <HAL_GPIO_Init+0x2bc>)
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	089b      	lsrs	r3, r3, #2
 8001d52:	3302      	adds	r3, #2
 8001d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	220f      	movs	r2, #15
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a40      	ldr	r2, [pc, #256]	; (8001e74 <HAL_GPIO_Init+0x2c0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d013      	beq.n	8001da0 <HAL_GPIO_Init+0x1ec>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a3f      	ldr	r2, [pc, #252]	; (8001e78 <HAL_GPIO_Init+0x2c4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d00d      	beq.n	8001d9c <HAL_GPIO_Init+0x1e8>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a3e      	ldr	r2, [pc, #248]	; (8001e7c <HAL_GPIO_Init+0x2c8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d007      	beq.n	8001d98 <HAL_GPIO_Init+0x1e4>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a3d      	ldr	r2, [pc, #244]	; (8001e80 <HAL_GPIO_Init+0x2cc>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d101      	bne.n	8001d94 <HAL_GPIO_Init+0x1e0>
 8001d90:	2303      	movs	r3, #3
 8001d92:	e006      	b.n	8001da2 <HAL_GPIO_Init+0x1ee>
 8001d94:	2304      	movs	r3, #4
 8001d96:	e004      	b.n	8001da2 <HAL_GPIO_Init+0x1ee>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e002      	b.n	8001da2 <HAL_GPIO_Init+0x1ee>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <HAL_GPIO_Init+0x1ee>
 8001da0:	2300      	movs	r3, #0
 8001da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da4:	f002 0203 	and.w	r2, r2, #3
 8001da8:	0092      	lsls	r2, r2, #2
 8001daa:	4093      	lsls	r3, r2
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001db2:	492f      	ldr	r1, [pc, #188]	; (8001e70 <HAL_GPIO_Init+0x2bc>)
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	3302      	adds	r3, #2
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	492c      	ldr	r1, [pc, #176]	; (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	600b      	str	r3, [r1, #0]
 8001dd8:	e006      	b.n	8001de8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dda:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	4928      	ldr	r1, [pc, #160]	; (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001df4:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4922      	ldr	r1, [pc, #136]	; (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	491e      	ldr	r1, [pc, #120]	; (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d006      	beq.n	8001e2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	4918      	ldr	r1, [pc, #96]	; (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	608b      	str	r3, [r1, #8]
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	4914      	ldr	r1, [pc, #80]	; (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d021      	beq.n	8001e88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	490e      	ldr	r1, [pc, #56]	; (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	60cb      	str	r3, [r1, #12]
 8001e50:	e021      	b.n	8001e96 <HAL_GPIO_Init+0x2e2>
 8001e52:	bf00      	nop
 8001e54:	10320000 	.word	0x10320000
 8001e58:	10310000 	.word	0x10310000
 8001e5c:	10220000 	.word	0x10220000
 8001e60:	10210000 	.word	0x10210000
 8001e64:	10120000 	.word	0x10120000
 8001e68:	10110000 	.word	0x10110000
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40010000 	.word	0x40010000
 8001e74:	40010800 	.word	0x40010800
 8001e78:	40010c00 	.word	0x40010c00
 8001e7c:	40011000 	.word	0x40011000
 8001e80:	40011400 	.word	0x40011400
 8001e84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	4909      	ldr	r1, [pc, #36]	; (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	3301      	adds	r3, #1
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f47f ae8e 	bne.w	8001bc8 <HAL_GPIO_Init+0x14>
  }
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	372c      	adds	r7, #44	; 0x2c
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	40010400 	.word	0x40010400

08001ebc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e26c      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 8087 	beq.w	8001fea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001edc:	4b92      	ldr	r3, [pc, #584]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	2b04      	cmp	r3, #4
 8001ee6:	d00c      	beq.n	8001f02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ee8:	4b8f      	ldr	r3, [pc, #572]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d112      	bne.n	8001f1a <HAL_RCC_OscConfig+0x5e>
 8001ef4:	4b8c      	ldr	r3, [pc, #560]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f00:	d10b      	bne.n	8001f1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f02:	4b89      	ldr	r3, [pc, #548]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d06c      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x12c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d168      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e246      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x76>
 8001f24:	4b80      	ldr	r3, [pc, #512]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a7f      	ldr	r2, [pc, #508]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	e02e      	b.n	8001f90 <HAL_RCC_OscConfig+0xd4>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x98>
 8001f3a:	4b7b      	ldr	r3, [pc, #492]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a7a      	ldr	r2, [pc, #488]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	4b78      	ldr	r3, [pc, #480]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a77      	ldr	r2, [pc, #476]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e01d      	b.n	8001f90 <HAL_RCC_OscConfig+0xd4>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0xbc>
 8001f5e:	4b72      	ldr	r3, [pc, #456]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a71      	ldr	r2, [pc, #452]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b6f      	ldr	r3, [pc, #444]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a6e      	ldr	r2, [pc, #440]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e00b      	b.n	8001f90 <HAL_RCC_OscConfig+0xd4>
 8001f78:	4b6b      	ldr	r3, [pc, #428]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a6a      	ldr	r2, [pc, #424]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b68      	ldr	r3, [pc, #416]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a67      	ldr	r2, [pc, #412]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d013      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7ff fae2 	bl	8001560 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff fade 	bl	8001560 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1fa      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb2:	4b5d      	ldr	r3, [pc, #372]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0xe4>
 8001fbe:	e014      	b.n	8001fea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff face 	bl	8001560 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff faca 	bl	8001560 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e1e6      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fda:	4b53      	ldr	r3, [pc, #332]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x10c>
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d063      	beq.n	80020be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ff6:	4b4c      	ldr	r3, [pc, #304]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00b      	beq.n	800201a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002002:	4b49      	ldr	r3, [pc, #292]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b08      	cmp	r3, #8
 800200c:	d11c      	bne.n	8002048 <HAL_RCC_OscConfig+0x18c>
 800200e:	4b46      	ldr	r3, [pc, #280]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d116      	bne.n	8002048 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201a:	4b43      	ldr	r3, [pc, #268]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d005      	beq.n	8002032 <HAL_RCC_OscConfig+0x176>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d001      	beq.n	8002032 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e1ba      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002032:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4939      	ldr	r1, [pc, #228]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8002042:	4313      	orrs	r3, r2
 8002044:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002046:	e03a      	b.n	80020be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d020      	beq.n	8002092 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002050:	4b36      	ldr	r3, [pc, #216]	; (800212c <HAL_RCC_OscConfig+0x270>)
 8002052:	2201      	movs	r2, #1
 8002054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002056:	f7ff fa83 	bl	8001560 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800205e:	f7ff fa7f 	bl	8001560 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e19b      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002070:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207c:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4927      	ldr	r1, [pc, #156]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 800208c:	4313      	orrs	r3, r2
 800208e:	600b      	str	r3, [r1, #0]
 8002090:	e015      	b.n	80020be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002092:	4b26      	ldr	r3, [pc, #152]	; (800212c <HAL_RCC_OscConfig+0x270>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7ff fa62 	bl	8001560 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a0:	f7ff fa5e 	bl	8001560 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e17a      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d03a      	beq.n	8002140 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d019      	beq.n	8002106 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020d2:	4b17      	ldr	r3, [pc, #92]	; (8002130 <HAL_RCC_OscConfig+0x274>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d8:	f7ff fa42 	bl	8001560 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e0:	f7ff fa3e 	bl	8001560 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e15a      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f2:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020fe:	2001      	movs	r0, #1
 8002100:	f000 faa6 	bl	8002650 <RCC_Delay>
 8002104:	e01c      	b.n	8002140 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_RCC_OscConfig+0x274>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210c:	f7ff fa28 	bl	8001560 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002112:	e00f      	b.n	8002134 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002114:	f7ff fa24 	bl	8001560 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d908      	bls.n	8002134 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e140      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000
 800212c:	42420000 	.word	0x42420000
 8002130:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002134:	4b9e      	ldr	r3, [pc, #632]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1e9      	bne.n	8002114 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80a6 	beq.w	800229a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002152:	4b97      	ldr	r3, [pc, #604]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10d      	bne.n	800217a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	4b94      	ldr	r3, [pc, #592]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	4a93      	ldr	r2, [pc, #588]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002168:	61d3      	str	r3, [r2, #28]
 800216a:	4b91      	ldr	r3, [pc, #580]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002176:	2301      	movs	r3, #1
 8002178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217a:	4b8e      	ldr	r3, [pc, #568]	; (80023b4 <HAL_RCC_OscConfig+0x4f8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d118      	bne.n	80021b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002186:	4b8b      	ldr	r3, [pc, #556]	; (80023b4 <HAL_RCC_OscConfig+0x4f8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a8a      	ldr	r2, [pc, #552]	; (80023b4 <HAL_RCC_OscConfig+0x4f8>)
 800218c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002192:	f7ff f9e5 	bl	8001560 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219a:	f7ff f9e1 	bl	8001560 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b64      	cmp	r3, #100	; 0x64
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e0fd      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ac:	4b81      	ldr	r3, [pc, #516]	; (80023b4 <HAL_RCC_OscConfig+0x4f8>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x312>
 80021c0:	4b7b      	ldr	r3, [pc, #492]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4a7a      	ldr	r2, [pc, #488]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6213      	str	r3, [r2, #32]
 80021cc:	e02d      	b.n	800222a <HAL_RCC_OscConfig+0x36e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x334>
 80021d6:	4b76      	ldr	r3, [pc, #472]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4a75      	ldr	r2, [pc, #468]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	6213      	str	r3, [r2, #32]
 80021e2:	4b73      	ldr	r3, [pc, #460]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	4a72      	ldr	r2, [pc, #456]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	f023 0304 	bic.w	r3, r3, #4
 80021ec:	6213      	str	r3, [r2, #32]
 80021ee:	e01c      	b.n	800222a <HAL_RCC_OscConfig+0x36e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	d10c      	bne.n	8002212 <HAL_RCC_OscConfig+0x356>
 80021f8:	4b6d      	ldr	r3, [pc, #436]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4a6c      	ldr	r2, [pc, #432]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80021fe:	f043 0304 	orr.w	r3, r3, #4
 8002202:	6213      	str	r3, [r2, #32]
 8002204:	4b6a      	ldr	r3, [pc, #424]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	4a69      	ldr	r2, [pc, #420]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6213      	str	r3, [r2, #32]
 8002210:	e00b      	b.n	800222a <HAL_RCC_OscConfig+0x36e>
 8002212:	4b67      	ldr	r3, [pc, #412]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4a66      	ldr	r2, [pc, #408]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	6213      	str	r3, [r2, #32]
 800221e:	4b64      	ldr	r3, [pc, #400]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4a63      	ldr	r2, [pc, #396]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002224:	f023 0304 	bic.w	r3, r3, #4
 8002228:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d015      	beq.n	800225e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002232:	f7ff f995 	bl	8001560 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	e00a      	b.n	8002250 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7ff f991 	bl	8001560 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	; 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e0ab      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002250:	4b57      	ldr	r3, [pc, #348]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0ee      	beq.n	800223a <HAL_RCC_OscConfig+0x37e>
 800225c:	e014      	b.n	8002288 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225e:	f7ff f97f 	bl	8001560 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002264:	e00a      	b.n	800227c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002266:	f7ff f97b 	bl	8001560 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f241 3288 	movw	r2, #5000	; 0x1388
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e095      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227c:	4b4c      	ldr	r3, [pc, #304]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1ee      	bne.n	8002266 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002288:	7dfb      	ldrb	r3, [r7, #23]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d105      	bne.n	800229a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228e:	4b48      	ldr	r3, [pc, #288]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4a47      	ldr	r2, [pc, #284]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002298:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 8081 	beq.w	80023a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a4:	4b42      	ldr	r3, [pc, #264]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d061      	beq.n	8002374 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d146      	bne.n	8002346 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b8:	4b3f      	ldr	r3, [pc, #252]	; (80023b8 <HAL_RCC_OscConfig+0x4fc>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022be:	f7ff f94f 	bl	8001560 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c6:	f7ff f94b 	bl	8001560 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e067      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d8:	4b35      	ldr	r3, [pc, #212]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f0      	bne.n	80022c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ec:	d108      	bne.n	8002300 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ee:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	492d      	ldr	r1, [pc, #180]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002300:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a19      	ldr	r1, [r3, #32]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	430b      	orrs	r3, r1
 8002312:	4927      	ldr	r1, [pc, #156]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002318:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <HAL_RCC_OscConfig+0x4fc>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7ff f91f 	bl	8001560 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002326:	f7ff f91b 	bl	8001560 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e037      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x46a>
 8002344:	e02f      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002346:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <HAL_RCC_OscConfig+0x4fc>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234c:	f7ff f908 	bl	8001560 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002354:	f7ff f904 	bl	8001560 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e020      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x498>
 8002372:	e018      	b.n	80023a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e013      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_RCC_OscConfig+0x4f4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	429a      	cmp	r2, r3
 8002392:	d106      	bne.n	80023a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239e:	429a      	cmp	r2, r3
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40007000 	.word	0x40007000
 80023b8:	42420060 	.word	0x42420060

080023bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0d0      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d0:	4b6a      	ldr	r3, [pc, #424]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d910      	bls.n	8002400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b67      	ldr	r3, [pc, #412]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 0207 	bic.w	r2, r3, #7
 80023e6:	4965      	ldr	r1, [pc, #404]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	4b63      	ldr	r3, [pc, #396]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0b8      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d020      	beq.n	800244e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002418:	4b59      	ldr	r3, [pc, #356]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a58      	ldr	r2, [pc, #352]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002422:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002430:	4b53      	ldr	r3, [pc, #332]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a52      	ldr	r2, [pc, #328]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800243a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800243c:	4b50      	ldr	r3, [pc, #320]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	494d      	ldr	r1, [pc, #308]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d040      	beq.n	80024dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d107      	bne.n	8002472 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	4b47      	ldr	r3, [pc, #284]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d115      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e07f      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247a:	4b41      	ldr	r3, [pc, #260]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e073      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248a:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e06b      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800249a:	4b39      	ldr	r3, [pc, #228]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f023 0203 	bic.w	r2, r3, #3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4936      	ldr	r1, [pc, #216]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024ac:	f7ff f858 	bl	8001560 <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b4:	f7ff f854 	bl	8001560 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e053      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ca:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 020c 	and.w	r2, r3, #12
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	429a      	cmp	r2, r3
 80024da:	d1eb      	bne.n	80024b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024dc:	4b27      	ldr	r3, [pc, #156]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d210      	bcs.n	800250c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 0207 	bic.w	r2, r3, #7
 80024f2:	4922      	ldr	r1, [pc, #136]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e032      	b.n	8002572 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002518:	4b19      	ldr	r3, [pc, #100]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4916      	ldr	r1, [pc, #88]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002536:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	490e      	ldr	r1, [pc, #56]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800254a:	f000 f821 	bl	8002590 <HAL_RCC_GetSysClockFreq>
 800254e:	4602      	mov	r2, r0
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	490a      	ldr	r1, [pc, #40]	; (8002584 <HAL_RCC_ClockConfig+0x1c8>)
 800255c:	5ccb      	ldrb	r3, [r1, r3]
 800255e:	fa22 f303 	lsr.w	r3, r2, r3
 8002562:	4a09      	ldr	r2, [pc, #36]	; (8002588 <HAL_RCC_ClockConfig+0x1cc>)
 8002564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_RCC_ClockConfig+0x1d0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe ffb6 	bl	80014dc <HAL_InitTick>

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40022000 	.word	0x40022000
 8002580:	40021000 	.word	0x40021000
 8002584:	08004778 	.word	0x08004778
 8002588:	20000000 	.word	0x20000000
 800258c:	20000004 	.word	0x20000004

08002590 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002590:	b490      	push	{r4, r7}
 8002592:	b08a      	sub	sp, #40	; 0x28
 8002594:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002596:	4b2a      	ldr	r3, [pc, #168]	; (8002640 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002598:	1d3c      	adds	r4, r7, #4
 800259a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800259c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025a0:	f240 2301 	movw	r3, #513	; 0x201
 80025a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	61fb      	str	r3, [r7, #28]
 80025aa:	2300      	movs	r3, #0
 80025ac:	61bb      	str	r3, [r7, #24]
 80025ae:	2300      	movs	r3, #0
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d002      	beq.n	80025d0 <HAL_RCC_GetSysClockFreq+0x40>
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d003      	beq.n	80025d6 <HAL_RCC_GetSysClockFreq+0x46>
 80025ce:	e02d      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d2:	623b      	str	r3, [r7, #32]
      break;
 80025d4:	e02d      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	0c9b      	lsrs	r3, r3, #18
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025e2:	4413      	add	r3, r2
 80025e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025f4:	4b13      	ldr	r3, [pc, #76]	; (8002644 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	0c5b      	lsrs	r3, r3, #17
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002602:	4413      	add	r3, r2
 8002604:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002608:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <HAL_RCC_GetSysClockFreq+0xb8>)
 800260e:	fb02 f203 	mul.w	r2, r2, r3
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	fbb2 f3f3 	udiv	r3, r2, r3
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
 800261a:	e004      	b.n	8002626 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	4a0b      	ldr	r2, [pc, #44]	; (800264c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002620:	fb02 f303 	mul.w	r3, r2, r3
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	623b      	str	r3, [r7, #32]
      break;
 800262a:	e002      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_RCC_GetSysClockFreq+0xb8>)
 800262e:	623b      	str	r3, [r7, #32]
      break;
 8002630:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002632:	6a3b      	ldr	r3, [r7, #32]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3728      	adds	r7, #40	; 0x28
 8002638:	46bd      	mov	sp, r7
 800263a:	bc90      	pop	{r4, r7}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	08004768 	.word	0x08004768
 8002644:	40021000 	.word	0x40021000
 8002648:	007a1200 	.word	0x007a1200
 800264c:	003d0900 	.word	0x003d0900

08002650 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <RCC_Delay+0x34>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <RCC_Delay+0x38>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	0a5b      	lsrs	r3, r3, #9
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	fb02 f303 	mul.w	r3, r2, r3
 800266a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800266c:	bf00      	nop
  }
  while (Delay --);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1e5a      	subs	r2, r3, #1
 8002672:	60fa      	str	r2, [r7, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f9      	bne.n	800266c <RCC_Delay+0x1c>
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	20000000 	.word	0x20000000
 8002688:	10624dd3 	.word	0x10624dd3

0800268c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e041      	b.n	8002722 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe fe20 	bl	80012f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3304      	adds	r3, #4
 80026c8:	4619      	mov	r1, r3
 80026ca:	4610      	mov	r0, r2
 80026cc:	f000 fc8e 	bl	8002fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e041      	b.n	80027c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d106      	bne.n	8002756 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f839 	bl	80027c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2202      	movs	r2, #2
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3304      	adds	r3, #4
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f000 fc3f 	bl	8002fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
	...

080027dc <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d109      	bne.n	8002804 <HAL_TIM_PWM_Start_DMA+0x28>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	bf0c      	ite	eq
 80027fc:	2301      	moveq	r3, #1
 80027fe:	2300      	movne	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	e022      	b.n	800284a <HAL_TIM_PWM_Start_DMA+0x6e>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b04      	cmp	r3, #4
 8002808:	d109      	bne.n	800281e <HAL_TIM_PWM_Start_DMA+0x42>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	bf0c      	ite	eq
 8002816:	2301      	moveq	r3, #1
 8002818:	2300      	movne	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	e015      	b.n	800284a <HAL_TIM_PWM_Start_DMA+0x6e>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b08      	cmp	r3, #8
 8002822:	d109      	bne.n	8002838 <HAL_TIM_PWM_Start_DMA+0x5c>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	e008      	b.n	800284a <HAL_TIM_PWM_Start_DMA+0x6e>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	bf0c      	ite	eq
 8002844:	2301      	moveq	r3, #1
 8002846:	2300      	movne	r3, #0
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 800284e:	2302      	movs	r3, #2
 8002850:	e14e      	b.n	8002af0 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d109      	bne.n	800286c <HAL_TIM_PWM_Start_DMA+0x90>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	bf0c      	ite	eq
 8002864:	2301      	moveq	r3, #1
 8002866:	2300      	movne	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	e022      	b.n	80028b2 <HAL_TIM_PWM_Start_DMA+0xd6>
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b04      	cmp	r3, #4
 8002870:	d109      	bne.n	8002886 <HAL_TIM_PWM_Start_DMA+0xaa>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b01      	cmp	r3, #1
 800287c:	bf0c      	ite	eq
 800287e:	2301      	moveq	r3, #1
 8002880:	2300      	movne	r3, #0
 8002882:	b2db      	uxtb	r3, r3
 8002884:	e015      	b.n	80028b2 <HAL_TIM_PWM_Start_DMA+0xd6>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b08      	cmp	r3, #8
 800288a:	d109      	bne.n	80028a0 <HAL_TIM_PWM_Start_DMA+0xc4>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b01      	cmp	r3, #1
 8002896:	bf0c      	ite	eq
 8002898:	2301      	moveq	r3, #1
 800289a:	2300      	movne	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	e008      	b.n	80028b2 <HAL_TIM_PWM_Start_DMA+0xd6>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d024      	beq.n	8002900 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d104      	bne.n	80028c6 <HAL_TIM_PWM_Start_DMA+0xea>
 80028bc:	887b      	ldrh	r3, [r7, #2]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e114      	b.n	8002af0 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d104      	bne.n	80028d6 <HAL_TIM_PWM_Start_DMA+0xfa>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d4:	e016      	b.n	8002904 <HAL_TIM_PWM_Start_DMA+0x128>
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d104      	bne.n	80028e6 <HAL_TIM_PWM_Start_DMA+0x10a>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028e4:	e00e      	b.n	8002904 <HAL_TIM_PWM_Start_DMA+0x128>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d104      	bne.n	80028f6 <HAL_TIM_PWM_Start_DMA+0x11a>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028f4:	e006      	b.n	8002904 <HAL_TIM_PWM_Start_DMA+0x128>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2202      	movs	r2, #2
 80028fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028fe:	e001      	b.n	8002904 <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0f5      	b.n	8002af0 <HAL_TIM_PWM_Start_DMA+0x314>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b0c      	cmp	r3, #12
 8002908:	f200 80ae 	bhi.w	8002a68 <HAL_TIM_PWM_Start_DMA+0x28c>
 800290c:	a201      	add	r2, pc, #4	; (adr r2, 8002914 <HAL_TIM_PWM_Start_DMA+0x138>)
 800290e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002912:	bf00      	nop
 8002914:	08002949 	.word	0x08002949
 8002918:	08002a69 	.word	0x08002a69
 800291c:	08002a69 	.word	0x08002a69
 8002920:	08002a69 	.word	0x08002a69
 8002924:	08002991 	.word	0x08002991
 8002928:	08002a69 	.word	0x08002a69
 800292c:	08002a69 	.word	0x08002a69
 8002930:	08002a69 	.word	0x08002a69
 8002934:	080029d9 	.word	0x080029d9
 8002938:	08002a69 	.word	0x08002a69
 800293c:	08002a69 	.word	0x08002a69
 8002940:	08002a69 	.word	0x08002a69
 8002944:	08002a21 	.word	0x08002a21
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	4a6a      	ldr	r2, [pc, #424]	; (8002af8 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800294e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	4a69      	ldr	r2, [pc, #420]	; (8002afc <HAL_TIM_PWM_Start_DMA+0x320>)
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	4a68      	ldr	r2, [pc, #416]	; (8002b00 <HAL_TIM_PWM_Start_DMA+0x324>)
 800295e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3334      	adds	r3, #52	; 0x34
 800296c:	461a      	mov	r2, r3
 800296e:	887b      	ldrh	r3, [r7, #2]
 8002970:	f7fe ff8c 	bl	800188c <HAL_DMA_Start_IT>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0b8      	b.n	8002af0 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298c:	60da      	str	r2, [r3, #12]
      break;
 800298e:	e06c      	b.n	8002a6a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	4a58      	ldr	r2, [pc, #352]	; (8002af8 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002996:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	4a57      	ldr	r2, [pc, #348]	; (8002afc <HAL_TIM_PWM_Start_DMA+0x320>)
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	4a56      	ldr	r2, [pc, #344]	; (8002b00 <HAL_TIM_PWM_Start_DMA+0x324>)
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3338      	adds	r3, #56	; 0x38
 80029b4:	461a      	mov	r2, r3
 80029b6:	887b      	ldrh	r3, [r7, #2]
 80029b8:	f7fe ff68 	bl	800188c <HAL_DMA_Start_IT>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e094      	b.n	8002af0 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029d4:	60da      	str	r2, [r3, #12]
      break;
 80029d6:	e048      	b.n	8002a6a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	4a46      	ldr	r2, [pc, #280]	; (8002af8 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	4a45      	ldr	r2, [pc, #276]	; (8002afc <HAL_TIM_PWM_Start_DMA+0x320>)
 80029e6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	4a44      	ldr	r2, [pc, #272]	; (8002b00 <HAL_TIM_PWM_Start_DMA+0x324>)
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	333c      	adds	r3, #60	; 0x3c
 80029fc:	461a      	mov	r2, r3
 80029fe:	887b      	ldrh	r3, [r7, #2]
 8002a00:	f7fe ff44 	bl	800188c <HAL_DMA_Start_IT>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e070      	b.n	8002af0 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a1c:	60da      	str	r2, [r3, #12]
      break;
 8002a1e:	e024      	b.n	8002a6a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	4a34      	ldr	r2, [pc, #208]	; (8002af8 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8002a26:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	4a33      	ldr	r2, [pc, #204]	; (8002afc <HAL_TIM_PWM_Start_DMA+0x320>)
 8002a2e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	4a32      	ldr	r2, [pc, #200]	; (8002b00 <HAL_TIM_PWM_Start_DMA+0x324>)
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	3340      	adds	r3, #64	; 0x40
 8002a44:	461a      	mov	r2, r3
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	f7fe ff20 	bl	800188c <HAL_DMA_Start_IT>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e04c      	b.n	8002af0 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a64:	60da      	str	r2, [r3, #12]
      break;
 8002a66:	e000      	b.n	8002a6a <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8002a68:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fd3a 	bl	80034ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a21      	ldr	r2, [pc, #132]	; (8002b04 <HAL_TIM_PWM_Start_DMA+0x328>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d107      	bne.n	8002a92 <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <HAL_TIM_PWM_Start_DMA+0x328>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00e      	beq.n	8002aba <HAL_TIM_PWM_Start_DMA+0x2de>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa4:	d009      	beq.n	8002aba <HAL_TIM_PWM_Start_DMA+0x2de>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a17      	ldr	r2, [pc, #92]	; (8002b08 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d004      	beq.n	8002aba <HAL_TIM_PWM_Start_DMA+0x2de>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a15      	ldr	r2, [pc, #84]	; (8002b0c <HAL_TIM_PWM_Start_DMA+0x330>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d111      	bne.n	8002ade <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2b06      	cmp	r3, #6
 8002aca:	d010      	beq.n	8002aee <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002adc:	e007      	b.n	8002aee <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0201 	orr.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	08002edd 	.word	0x08002edd
 8002afc:	08002f85 	.word	0x08002f85
 8002b00:	08002e4b 	.word	0x08002e4b
 8002b04:	40012c00 	.word	0x40012c00
 8002b08:	40000400 	.word	0x40000400
 8002b0c:	40000800 	.word	0x40000800

08002b10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e0ac      	b.n	8002c84 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b0c      	cmp	r3, #12
 8002b36:	f200 809f 	bhi.w	8002c78 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002b3a:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b40:	08002b75 	.word	0x08002b75
 8002b44:	08002c79 	.word	0x08002c79
 8002b48:	08002c79 	.word	0x08002c79
 8002b4c:	08002c79 	.word	0x08002c79
 8002b50:	08002bb5 	.word	0x08002bb5
 8002b54:	08002c79 	.word	0x08002c79
 8002b58:	08002c79 	.word	0x08002c79
 8002b5c:	08002c79 	.word	0x08002c79
 8002b60:	08002bf7 	.word	0x08002bf7
 8002b64:	08002c79 	.word	0x08002c79
 8002b68:	08002c79 	.word	0x08002c79
 8002b6c:	08002c79 	.word	0x08002c79
 8002b70:	08002c37 	.word	0x08002c37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fa98 	bl	80030b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0208 	orr.w	r2, r2, #8
 8002b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699a      	ldr	r2, [r3, #24]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0204 	bic.w	r2, r2, #4
 8002b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6999      	ldr	r1, [r3, #24]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	619a      	str	r2, [r3, #24]
      break;
 8002bb2:	e062      	b.n	8002c7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fade 	bl	800317c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6999      	ldr	r1, [r3, #24]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	021a      	lsls	r2, r3, #8
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	619a      	str	r2, [r3, #24]
      break;
 8002bf4:	e041      	b.n	8002c7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68b9      	ldr	r1, [r7, #8]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fb27 	bl	8003250 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69da      	ldr	r2, [r3, #28]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0208 	orr.w	r2, r2, #8
 8002c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	69da      	ldr	r2, [r3, #28]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0204 	bic.w	r2, r2, #4
 8002c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	69d9      	ldr	r1, [r3, #28]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	61da      	str	r2, [r3, #28]
      break;
 8002c34:	e021      	b.n	8002c7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fb71 	bl	8003324 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69da      	ldr	r2, [r3, #28]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69d9      	ldr	r1, [r3, #28]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	021a      	lsls	r2, r3, #8
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	61da      	str	r2, [r3, #28]
      break;
 8002c76:	e000      	b.n	8002c7a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002c78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_TIM_ConfigClockSource+0x18>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e0b3      	b.n	8002e0c <HAL_TIM_ConfigClockSource+0x180>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cdc:	d03e      	beq.n	8002d5c <HAL_TIM_ConfigClockSource+0xd0>
 8002cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce2:	f200 8087 	bhi.w	8002df4 <HAL_TIM_ConfigClockSource+0x168>
 8002ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cea:	f000 8085 	beq.w	8002df8 <HAL_TIM_ConfigClockSource+0x16c>
 8002cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf2:	d87f      	bhi.n	8002df4 <HAL_TIM_ConfigClockSource+0x168>
 8002cf4:	2b70      	cmp	r3, #112	; 0x70
 8002cf6:	d01a      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0xa2>
 8002cf8:	2b70      	cmp	r3, #112	; 0x70
 8002cfa:	d87b      	bhi.n	8002df4 <HAL_TIM_ConfigClockSource+0x168>
 8002cfc:	2b60      	cmp	r3, #96	; 0x60
 8002cfe:	d050      	beq.n	8002da2 <HAL_TIM_ConfigClockSource+0x116>
 8002d00:	2b60      	cmp	r3, #96	; 0x60
 8002d02:	d877      	bhi.n	8002df4 <HAL_TIM_ConfigClockSource+0x168>
 8002d04:	2b50      	cmp	r3, #80	; 0x50
 8002d06:	d03c      	beq.n	8002d82 <HAL_TIM_ConfigClockSource+0xf6>
 8002d08:	2b50      	cmp	r3, #80	; 0x50
 8002d0a:	d873      	bhi.n	8002df4 <HAL_TIM_ConfigClockSource+0x168>
 8002d0c:	2b40      	cmp	r3, #64	; 0x40
 8002d0e:	d058      	beq.n	8002dc2 <HAL_TIM_ConfigClockSource+0x136>
 8002d10:	2b40      	cmp	r3, #64	; 0x40
 8002d12:	d86f      	bhi.n	8002df4 <HAL_TIM_ConfigClockSource+0x168>
 8002d14:	2b30      	cmp	r3, #48	; 0x30
 8002d16:	d064      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0x156>
 8002d18:	2b30      	cmp	r3, #48	; 0x30
 8002d1a:	d86b      	bhi.n	8002df4 <HAL_TIM_ConfigClockSource+0x168>
 8002d1c:	2b20      	cmp	r3, #32
 8002d1e:	d060      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0x156>
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d867      	bhi.n	8002df4 <HAL_TIM_ConfigClockSource+0x168>
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d05c      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0x156>
 8002d28:	2b10      	cmp	r3, #16
 8002d2a:	d05a      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d2c:	e062      	b.n	8002df4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6899      	ldr	r1, [r3, #8]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f000 fbb6 	bl	80034ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	609a      	str	r2, [r3, #8]
      break;
 8002d5a:	e04e      	b.n	8002dfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	6899      	ldr	r1, [r3, #8]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f000 fb9f 	bl	80034ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d7e:	609a      	str	r2, [r3, #8]
      break;
 8002d80:	e03b      	b.n	8002dfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	6859      	ldr	r1, [r3, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f000 fb16 	bl	80033c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2150      	movs	r1, #80	; 0x50
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fb6d 	bl	800347a <TIM_ITRx_SetConfig>
      break;
 8002da0:	e02b      	b.n	8002dfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	6859      	ldr	r1, [r3, #4]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	461a      	mov	r2, r3
 8002db0:	f000 fb34 	bl	800341c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2160      	movs	r1, #96	; 0x60
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 fb5d 	bl	800347a <TIM_ITRx_SetConfig>
      break;
 8002dc0:	e01b      	b.n	8002dfa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	6859      	ldr	r1, [r3, #4]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f000 faf6 	bl	80033c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2140      	movs	r1, #64	; 0x40
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fb4d 	bl	800347a <TIM_ITRx_SetConfig>
      break;
 8002de0:	e00b      	b.n	8002dfa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4619      	mov	r1, r3
 8002dec:	4610      	mov	r0, r2
 8002dee:	f000 fb44 	bl	800347a <TIM_ITRx_SetConfig>
        break;
 8002df2:	e002      	b.n	8002dfa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002df4:	bf00      	nop
 8002df6:	e000      	b.n	8002dfa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002df8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr

08002e26 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d107      	bne.n	8002e72 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e70:	e02a      	b.n	8002ec8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d107      	bne.n	8002e8c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e8a:	e01d      	b.n	8002ec8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d107      	bne.n	8002ea6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2204      	movs	r2, #4
 8002e9a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea4:	e010      	b.n	8002ec8 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d107      	bne.n	8002ec0 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2208      	movs	r2, #8
 8002eb4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ebe:	e003      	b.n	8002ec8 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f7ff ffb5 	bl	8002e38 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	771a      	strb	r2, [r3, #28]
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d10b      	bne.n	8002f0c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d136      	bne.n	8002f70 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f0a:	e031      	b.n	8002f70 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d10b      	bne.n	8002f2e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d125      	bne.n	8002f70 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f2c:	e020      	b.n	8002f70 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d10b      	bne.n	8002f50 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2204      	movs	r2, #4
 8002f3c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d114      	bne.n	8002f70 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f4e:	e00f      	b.n	8002f70 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d10a      	bne.n	8002f70 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d103      	bne.n	8002f70 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f7ff ff4f 	bl	8002e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	771a      	strb	r2, [r3, #28]
}
 8002f7c:	bf00      	nop
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d103      	bne.n	8002fa4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	771a      	strb	r2, [r3, #28]
 8002fa2:	e019      	b.n	8002fd8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d103      	bne.n	8002fb6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	771a      	strb	r2, [r3, #28]
 8002fb4:	e010      	b.n	8002fd8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d103      	bne.n	8002fc8 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2204      	movs	r2, #4
 8002fc4:	771a      	strb	r2, [r3, #28]
 8002fc6:	e007      	b.n	8002fd8 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d102      	bne.n	8002fd8 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f7ff ff24 	bl	8002e26 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	771a      	strb	r2, [r3, #28]
}
 8002fe4:	bf00      	nop
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a29      	ldr	r2, [pc, #164]	; (80030a4 <TIM_Base_SetConfig+0xb8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00b      	beq.n	800301c <TIM_Base_SetConfig+0x30>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300a:	d007      	beq.n	800301c <TIM_Base_SetConfig+0x30>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a26      	ldr	r2, [pc, #152]	; (80030a8 <TIM_Base_SetConfig+0xbc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d003      	beq.n	800301c <TIM_Base_SetConfig+0x30>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a25      	ldr	r2, [pc, #148]	; (80030ac <TIM_Base_SetConfig+0xc0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d108      	bne.n	800302e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a1c      	ldr	r2, [pc, #112]	; (80030a4 <TIM_Base_SetConfig+0xb8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00b      	beq.n	800304e <TIM_Base_SetConfig+0x62>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303c:	d007      	beq.n	800304e <TIM_Base_SetConfig+0x62>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a19      	ldr	r2, [pc, #100]	; (80030a8 <TIM_Base_SetConfig+0xbc>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d003      	beq.n	800304e <TIM_Base_SetConfig+0x62>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a18      	ldr	r2, [pc, #96]	; (80030ac <TIM_Base_SetConfig+0xc0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d108      	bne.n	8003060 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a07      	ldr	r2, [pc, #28]	; (80030a4 <TIM_Base_SetConfig+0xb8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d103      	bne.n	8003094 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	691a      	ldr	r2, [r3, #16]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	615a      	str	r2, [r3, #20]
}
 800309a:	bf00      	nop
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr
 80030a4:	40012c00 	.word	0x40012c00
 80030a8:	40000400 	.word	0x40000400
 80030ac:	40000800 	.word	0x40000800

080030b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	f023 0201 	bic.w	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0303 	bic.w	r3, r3, #3
 80030e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f023 0302 	bic.w	r3, r3, #2
 80030f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a1c      	ldr	r2, [pc, #112]	; (8003178 <TIM_OC1_SetConfig+0xc8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d10c      	bne.n	8003126 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f023 0308 	bic.w	r3, r3, #8
 8003112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f023 0304 	bic.w	r3, r3, #4
 8003124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a13      	ldr	r2, [pc, #76]	; (8003178 <TIM_OC1_SetConfig+0xc8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d111      	bne.n	8003152 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800313c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	621a      	str	r2, [r3, #32]
}
 800316c:	bf00      	nop
 800316e:	371c      	adds	r7, #28
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40012c00 	.word	0x40012c00

0800317c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f023 0210 	bic.w	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 0320 	bic.w	r3, r3, #32
 80031c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a1d      	ldr	r2, [pc, #116]	; (800324c <TIM_OC2_SetConfig+0xd0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d10d      	bne.n	80031f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a14      	ldr	r2, [pc, #80]	; (800324c <TIM_OC2_SetConfig+0xd0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d113      	bne.n	8003228 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003206:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800320e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	621a      	str	r2, [r3, #32]
}
 8003242:	bf00      	nop
 8003244:	371c      	adds	r7, #28
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr
 800324c:	40012c00 	.word	0x40012c00

08003250 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0303 	bic.w	r3, r3, #3
 8003286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <TIM_OC3_SetConfig+0xd0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d10d      	bne.n	80032ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a14      	ldr	r2, [pc, #80]	; (8003320 <TIM_OC3_SetConfig+0xd0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d113      	bne.n	80032fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	621a      	str	r2, [r3, #32]
}
 8003314:	bf00      	nop
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40012c00 	.word	0x40012c00

08003324 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800335a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4313      	orrs	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800336e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	031b      	lsls	r3, r3, #12
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a0f      	ldr	r2, [pc, #60]	; (80033bc <TIM_OC4_SetConfig+0x98>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d109      	bne.n	8003398 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800338a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	019b      	lsls	r3, r3, #6
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	621a      	str	r2, [r3, #32]
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	40012c00 	.word	0x40012c00

080033c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	f023 0201 	bic.w	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f023 030a 	bic.w	r3, r3, #10
 80033fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4313      	orrs	r3, r2
 8003404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	621a      	str	r2, [r3, #32]
}
 8003412:	bf00      	nop
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr

0800341c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f023 0210 	bic.w	r2, r3, #16
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003446:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	031b      	lsls	r3, r3, #12
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003458:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4313      	orrs	r3, r2
 8003462:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	621a      	str	r2, [r3, #32]
}
 8003470:	bf00      	nop
 8003472:	371c      	adds	r7, #28
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr

0800347a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800347a:	b480      	push	{r7}
 800347c:	b085      	sub	sp, #20
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	f043 0307 	orr.w	r3, r3, #7
 800349c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	609a      	str	r2, [r3, #8]
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr

080034ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b087      	sub	sp, #28
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	021a      	lsls	r2, r3, #8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	609a      	str	r2, [r3, #8]
}
 80034e2:	bf00      	nop
 80034e4:	371c      	adds	r7, #28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr

080034ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	2201      	movs	r2, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a1a      	ldr	r2, [r3, #32]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	43db      	mvns	r3, r3
 800350e:	401a      	ands	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a1a      	ldr	r2, [r3, #32]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	fa01 f303 	lsl.w	r3, r1, r3
 8003524:	431a      	orrs	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	621a      	str	r2, [r3, #32]
}
 800352a:	bf00      	nop
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003548:	2302      	movs	r3, #2
 800354a:	e046      	b.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003572:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a16      	ldr	r2, [pc, #88]	; (80035e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00e      	beq.n	80035ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003598:	d009      	beq.n	80035ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a12      	ldr	r2, [pc, #72]	; (80035e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d004      	beq.n	80035ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a10      	ldr	r2, [pc, #64]	; (80035ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d10c      	bne.n	80035c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	4313      	orrs	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	40012c00 	.word	0x40012c00
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800

080035f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003608:	2302      	movs	r3, #2
 800360a:	e03d      	b.n	8003688 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4313      	orrs	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr
	...

08003694 <__libc_init_array>:
 8003694:	b570      	push	{r4, r5, r6, lr}
 8003696:	2600      	movs	r6, #0
 8003698:	4d0c      	ldr	r5, [pc, #48]	; (80036cc <__libc_init_array+0x38>)
 800369a:	4c0d      	ldr	r4, [pc, #52]	; (80036d0 <__libc_init_array+0x3c>)
 800369c:	1b64      	subs	r4, r4, r5
 800369e:	10a4      	asrs	r4, r4, #2
 80036a0:	42a6      	cmp	r6, r4
 80036a2:	d109      	bne.n	80036b8 <__libc_init_array+0x24>
 80036a4:	f001 f852 	bl	800474c <_init>
 80036a8:	2600      	movs	r6, #0
 80036aa:	4d0a      	ldr	r5, [pc, #40]	; (80036d4 <__libc_init_array+0x40>)
 80036ac:	4c0a      	ldr	r4, [pc, #40]	; (80036d8 <__libc_init_array+0x44>)
 80036ae:	1b64      	subs	r4, r4, r5
 80036b0:	10a4      	asrs	r4, r4, #2
 80036b2:	42a6      	cmp	r6, r4
 80036b4:	d105      	bne.n	80036c2 <__libc_init_array+0x2e>
 80036b6:	bd70      	pop	{r4, r5, r6, pc}
 80036b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036bc:	4798      	blx	r3
 80036be:	3601      	adds	r6, #1
 80036c0:	e7ee      	b.n	80036a0 <__libc_init_array+0xc>
 80036c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c6:	4798      	blx	r3
 80036c8:	3601      	adds	r6, #1
 80036ca:	e7f2      	b.n	80036b2 <__libc_init_array+0x1e>
 80036cc:	08004960 	.word	0x08004960
 80036d0:	08004960 	.word	0x08004960
 80036d4:	08004960 	.word	0x08004960
 80036d8:	08004964 	.word	0x08004964

080036dc <memset>:
 80036dc:	4603      	mov	r3, r0
 80036de:	4402      	add	r2, r0
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d100      	bne.n	80036e6 <memset+0xa>
 80036e4:	4770      	bx	lr
 80036e6:	f803 1b01 	strb.w	r1, [r3], #1
 80036ea:	e7f9      	b.n	80036e0 <memset+0x4>

080036ec <tan>:
 80036ec:	b530      	push	{r4, r5, lr}
 80036ee:	4a12      	ldr	r2, [pc, #72]	; (8003738 <tan+0x4c>)
 80036f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80036f4:	4293      	cmp	r3, r2
 80036f6:	b087      	sub	sp, #28
 80036f8:	dc06      	bgt.n	8003708 <tan+0x1c>
 80036fa:	2301      	movs	r3, #1
 80036fc:	2200      	movs	r2, #0
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	2300      	movs	r3, #0
 8003702:	f000 fd55 	bl	80041b0 <__kernel_tan>
 8003706:	e006      	b.n	8003716 <tan+0x2a>
 8003708:	4a0c      	ldr	r2, [pc, #48]	; (800373c <tan+0x50>)
 800370a:	4293      	cmp	r3, r2
 800370c:	dd05      	ble.n	800371a <tan+0x2e>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	f7fc fd21 	bl	8000158 <__aeabi_dsub>
 8003716:	b007      	add	sp, #28
 8003718:	bd30      	pop	{r4, r5, pc}
 800371a:	aa02      	add	r2, sp, #8
 800371c:	f000 f810 	bl	8003740 <__ieee754_rem_pio2>
 8003720:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003724:	0040      	lsls	r0, r0, #1
 8003726:	f000 0002 	and.w	r0, r0, #2
 800372a:	f1c0 0001 	rsb	r0, r0, #1
 800372e:	9000      	str	r0, [sp, #0]
 8003730:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003734:	e7e5      	b.n	8003702 <tan+0x16>
 8003736:	bf00      	nop
 8003738:	3fe921fb 	.word	0x3fe921fb
 800373c:	7fefffff 	.word	0x7fefffff

08003740 <__ieee754_rem_pio2>:
 8003740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003744:	4614      	mov	r4, r2
 8003746:	4ac4      	ldr	r2, [pc, #784]	; (8003a58 <__ieee754_rem_pio2+0x318>)
 8003748:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800374c:	b08d      	sub	sp, #52	; 0x34
 800374e:	4592      	cmp	sl, r2
 8003750:	9104      	str	r1, [sp, #16]
 8003752:	dc07      	bgt.n	8003764 <__ieee754_rem_pio2+0x24>
 8003754:	2200      	movs	r2, #0
 8003756:	2300      	movs	r3, #0
 8003758:	e9c4 0100 	strd	r0, r1, [r4]
 800375c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003760:	2500      	movs	r5, #0
 8003762:	e024      	b.n	80037ae <__ieee754_rem_pio2+0x6e>
 8003764:	4abd      	ldr	r2, [pc, #756]	; (8003a5c <__ieee754_rem_pio2+0x31c>)
 8003766:	4592      	cmp	sl, r2
 8003768:	dc72      	bgt.n	8003850 <__ieee754_rem_pio2+0x110>
 800376a:	9b04      	ldr	r3, [sp, #16]
 800376c:	4dbc      	ldr	r5, [pc, #752]	; (8003a60 <__ieee754_rem_pio2+0x320>)
 800376e:	2b00      	cmp	r3, #0
 8003770:	a3ab      	add	r3, pc, #684	; (adr r3, 8003a20 <__ieee754_rem_pio2+0x2e0>)
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	dd36      	ble.n	80037e6 <__ieee754_rem_pio2+0xa6>
 8003778:	f7fc fcee 	bl	8000158 <__aeabi_dsub>
 800377c:	45aa      	cmp	sl, r5
 800377e:	4606      	mov	r6, r0
 8003780:	460f      	mov	r7, r1
 8003782:	d018      	beq.n	80037b6 <__ieee754_rem_pio2+0x76>
 8003784:	a3a8      	add	r3, pc, #672	; (adr r3, 8003a28 <__ieee754_rem_pio2+0x2e8>)
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f7fc fce5 	bl	8000158 <__aeabi_dsub>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4630      	mov	r0, r6
 8003794:	e9c4 2300 	strd	r2, r3, [r4]
 8003798:	4639      	mov	r1, r7
 800379a:	f7fc fcdd 	bl	8000158 <__aeabi_dsub>
 800379e:	a3a2      	add	r3, pc, #648	; (adr r3, 8003a28 <__ieee754_rem_pio2+0x2e8>)
 80037a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a4:	f7fc fcd8 	bl	8000158 <__aeabi_dsub>
 80037a8:	2501      	movs	r5, #1
 80037aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80037ae:	4628      	mov	r0, r5
 80037b0:	b00d      	add	sp, #52	; 0x34
 80037b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037b6:	a39e      	add	r3, pc, #632	; (adr r3, 8003a30 <__ieee754_rem_pio2+0x2f0>)
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	f7fc fccc 	bl	8000158 <__aeabi_dsub>
 80037c0:	a39d      	add	r3, pc, #628	; (adr r3, 8003a38 <__ieee754_rem_pio2+0x2f8>)
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	4606      	mov	r6, r0
 80037c8:	460f      	mov	r7, r1
 80037ca:	f7fc fcc5 	bl	8000158 <__aeabi_dsub>
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	4630      	mov	r0, r6
 80037d4:	e9c4 2300 	strd	r2, r3, [r4]
 80037d8:	4639      	mov	r1, r7
 80037da:	f7fc fcbd 	bl	8000158 <__aeabi_dsub>
 80037de:	a396      	add	r3, pc, #600	; (adr r3, 8003a38 <__ieee754_rem_pio2+0x2f8>)
 80037e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e4:	e7de      	b.n	80037a4 <__ieee754_rem_pio2+0x64>
 80037e6:	f7fc fcb9 	bl	800015c <__adddf3>
 80037ea:	45aa      	cmp	sl, r5
 80037ec:	4606      	mov	r6, r0
 80037ee:	460f      	mov	r7, r1
 80037f0:	d016      	beq.n	8003820 <__ieee754_rem_pio2+0xe0>
 80037f2:	a38d      	add	r3, pc, #564	; (adr r3, 8003a28 <__ieee754_rem_pio2+0x2e8>)
 80037f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f8:	f7fc fcb0 	bl	800015c <__adddf3>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4630      	mov	r0, r6
 8003802:	e9c4 2300 	strd	r2, r3, [r4]
 8003806:	4639      	mov	r1, r7
 8003808:	f7fc fca6 	bl	8000158 <__aeabi_dsub>
 800380c:	a386      	add	r3, pc, #536	; (adr r3, 8003a28 <__ieee754_rem_pio2+0x2e8>)
 800380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003812:	f7fc fca3 	bl	800015c <__adddf3>
 8003816:	f04f 35ff 	mov.w	r5, #4294967295
 800381a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800381e:	e7c6      	b.n	80037ae <__ieee754_rem_pio2+0x6e>
 8003820:	a383      	add	r3, pc, #524	; (adr r3, 8003a30 <__ieee754_rem_pio2+0x2f0>)
 8003822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003826:	f7fc fc99 	bl	800015c <__adddf3>
 800382a:	a383      	add	r3, pc, #524	; (adr r3, 8003a38 <__ieee754_rem_pio2+0x2f8>)
 800382c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003830:	4606      	mov	r6, r0
 8003832:	460f      	mov	r7, r1
 8003834:	f7fc fc92 	bl	800015c <__adddf3>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4630      	mov	r0, r6
 800383e:	e9c4 2300 	strd	r2, r3, [r4]
 8003842:	4639      	mov	r1, r7
 8003844:	f7fc fc88 	bl	8000158 <__aeabi_dsub>
 8003848:	a37b      	add	r3, pc, #492	; (adr r3, 8003a38 <__ieee754_rem_pio2+0x2f8>)
 800384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384e:	e7e0      	b.n	8003812 <__ieee754_rem_pio2+0xd2>
 8003850:	4a84      	ldr	r2, [pc, #528]	; (8003a64 <__ieee754_rem_pio2+0x324>)
 8003852:	4592      	cmp	sl, r2
 8003854:	f300 80d5 	bgt.w	8003a02 <__ieee754_rem_pio2+0x2c2>
 8003858:	f000 fe6e 	bl	8004538 <fabs>
 800385c:	a378      	add	r3, pc, #480	; (adr r3, 8003a40 <__ieee754_rem_pio2+0x300>)
 800385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003862:	4606      	mov	r6, r0
 8003864:	460f      	mov	r7, r1
 8003866:	f7fc fe2f 	bl	80004c8 <__aeabi_dmul>
 800386a:	2200      	movs	r2, #0
 800386c:	4b7e      	ldr	r3, [pc, #504]	; (8003a68 <__ieee754_rem_pio2+0x328>)
 800386e:	f7fc fc75 	bl	800015c <__adddf3>
 8003872:	f7fd f8c3 	bl	80009fc <__aeabi_d2iz>
 8003876:	4605      	mov	r5, r0
 8003878:	f7fc fdbc 	bl	80003f4 <__aeabi_i2d>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003884:	a366      	add	r3, pc, #408	; (adr r3, 8003a20 <__ieee754_rem_pio2+0x2e0>)
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f7fc fe1d 	bl	80004c8 <__aeabi_dmul>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	4630      	mov	r0, r6
 8003894:	4639      	mov	r1, r7
 8003896:	f7fc fc5f 	bl	8000158 <__aeabi_dsub>
 800389a:	a363      	add	r3, pc, #396	; (adr r3, 8003a28 <__ieee754_rem_pio2+0x2e8>)
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	4680      	mov	r8, r0
 80038a2:	4689      	mov	r9, r1
 80038a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038a8:	f7fc fe0e 	bl	80004c8 <__aeabi_dmul>
 80038ac:	2d1f      	cmp	r5, #31
 80038ae:	4606      	mov	r6, r0
 80038b0:	460f      	mov	r7, r1
 80038b2:	dc0e      	bgt.n	80038d2 <__ieee754_rem_pio2+0x192>
 80038b4:	4b6d      	ldr	r3, [pc, #436]	; (8003a6c <__ieee754_rem_pio2+0x32c>)
 80038b6:	1e6a      	subs	r2, r5, #1
 80038b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038bc:	4553      	cmp	r3, sl
 80038be:	d008      	beq.n	80038d2 <__ieee754_rem_pio2+0x192>
 80038c0:	4632      	mov	r2, r6
 80038c2:	463b      	mov	r3, r7
 80038c4:	4640      	mov	r0, r8
 80038c6:	4649      	mov	r1, r9
 80038c8:	f7fc fc46 	bl	8000158 <__aeabi_dsub>
 80038cc:	e9c4 0100 	strd	r0, r1, [r4]
 80038d0:	e013      	b.n	80038fa <__ieee754_rem_pio2+0x1ba>
 80038d2:	463b      	mov	r3, r7
 80038d4:	4632      	mov	r2, r6
 80038d6:	4640      	mov	r0, r8
 80038d8:	4649      	mov	r1, r9
 80038da:	f7fc fc3d 	bl	8000158 <__aeabi_dsub>
 80038de:	ea4f 532a 	mov.w	r3, sl, asr #20
 80038e2:	9305      	str	r3, [sp, #20]
 80038e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80038e8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80038ec:	f1ba 0f10 	cmp.w	sl, #16
 80038f0:	dc1f      	bgt.n	8003932 <__ieee754_rem_pio2+0x1f2>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	e9c4 2300 	strd	r2, r3, [r4]
 80038fa:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80038fe:	4640      	mov	r0, r8
 8003900:	4653      	mov	r3, sl
 8003902:	4649      	mov	r1, r9
 8003904:	f7fc fc28 	bl	8000158 <__aeabi_dsub>
 8003908:	4632      	mov	r2, r6
 800390a:	463b      	mov	r3, r7
 800390c:	f7fc fc24 	bl	8000158 <__aeabi_dsub>
 8003910:	460b      	mov	r3, r1
 8003912:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003916:	9904      	ldr	r1, [sp, #16]
 8003918:	4602      	mov	r2, r0
 800391a:	2900      	cmp	r1, #0
 800391c:	f6bf af47 	bge.w	80037ae <__ieee754_rem_pio2+0x6e>
 8003920:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8003924:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8003928:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800392c:	60e3      	str	r3, [r4, #12]
 800392e:	426d      	negs	r5, r5
 8003930:	e73d      	b.n	80037ae <__ieee754_rem_pio2+0x6e>
 8003932:	a33f      	add	r3, pc, #252	; (adr r3, 8003a30 <__ieee754_rem_pio2+0x2f0>)
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800393c:	f7fc fdc4 	bl	80004c8 <__aeabi_dmul>
 8003940:	4606      	mov	r6, r0
 8003942:	460f      	mov	r7, r1
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4640      	mov	r0, r8
 800394a:	4649      	mov	r1, r9
 800394c:	f7fc fc04 	bl	8000158 <__aeabi_dsub>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4682      	mov	sl, r0
 8003956:	468b      	mov	fp, r1
 8003958:	4640      	mov	r0, r8
 800395a:	4649      	mov	r1, r9
 800395c:	f7fc fbfc 	bl	8000158 <__aeabi_dsub>
 8003960:	4632      	mov	r2, r6
 8003962:	463b      	mov	r3, r7
 8003964:	f7fc fbf8 	bl	8000158 <__aeabi_dsub>
 8003968:	a333      	add	r3, pc, #204	; (adr r3, 8003a38 <__ieee754_rem_pio2+0x2f8>)
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	4606      	mov	r6, r0
 8003970:	460f      	mov	r7, r1
 8003972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003976:	f7fc fda7 	bl	80004c8 <__aeabi_dmul>
 800397a:	4632      	mov	r2, r6
 800397c:	463b      	mov	r3, r7
 800397e:	f7fc fbeb 	bl	8000158 <__aeabi_dsub>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4606      	mov	r6, r0
 8003988:	460f      	mov	r7, r1
 800398a:	4650      	mov	r0, sl
 800398c:	4659      	mov	r1, fp
 800398e:	f7fc fbe3 	bl	8000158 <__aeabi_dsub>
 8003992:	9a05      	ldr	r2, [sp, #20]
 8003994:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b31      	cmp	r3, #49	; 0x31
 800399c:	dc06      	bgt.n	80039ac <__ieee754_rem_pio2+0x26c>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	46d0      	mov	r8, sl
 80039a4:	46d9      	mov	r9, fp
 80039a6:	e9c4 2300 	strd	r2, r3, [r4]
 80039aa:	e7a6      	b.n	80038fa <__ieee754_rem_pio2+0x1ba>
 80039ac:	a326      	add	r3, pc, #152	; (adr r3, 8003a48 <__ieee754_rem_pio2+0x308>)
 80039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039b6:	f7fc fd87 	bl	80004c8 <__aeabi_dmul>
 80039ba:	4606      	mov	r6, r0
 80039bc:	460f      	mov	r7, r1
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4650      	mov	r0, sl
 80039c4:	4659      	mov	r1, fp
 80039c6:	f7fc fbc7 	bl	8000158 <__aeabi_dsub>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4680      	mov	r8, r0
 80039d0:	4689      	mov	r9, r1
 80039d2:	4650      	mov	r0, sl
 80039d4:	4659      	mov	r1, fp
 80039d6:	f7fc fbbf 	bl	8000158 <__aeabi_dsub>
 80039da:	4632      	mov	r2, r6
 80039dc:	463b      	mov	r3, r7
 80039de:	f7fc fbbb 	bl	8000158 <__aeabi_dsub>
 80039e2:	a31b      	add	r3, pc, #108	; (adr r3, 8003a50 <__ieee754_rem_pio2+0x310>)
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	4606      	mov	r6, r0
 80039ea:	460f      	mov	r7, r1
 80039ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039f0:	f7fc fd6a 	bl	80004c8 <__aeabi_dmul>
 80039f4:	4632      	mov	r2, r6
 80039f6:	463b      	mov	r3, r7
 80039f8:	f7fc fbae 	bl	8000158 <__aeabi_dsub>
 80039fc:	4606      	mov	r6, r0
 80039fe:	460f      	mov	r7, r1
 8003a00:	e75e      	b.n	80038c0 <__ieee754_rem_pio2+0x180>
 8003a02:	4a1b      	ldr	r2, [pc, #108]	; (8003a70 <__ieee754_rem_pio2+0x330>)
 8003a04:	4592      	cmp	sl, r2
 8003a06:	dd35      	ble.n	8003a74 <__ieee754_rem_pio2+0x334>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	f7fc fba4 	bl	8000158 <__aeabi_dsub>
 8003a10:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003a14:	e9c4 0100 	strd	r0, r1, [r4]
 8003a18:	e6a2      	b.n	8003760 <__ieee754_rem_pio2+0x20>
 8003a1a:	bf00      	nop
 8003a1c:	f3af 8000 	nop.w
 8003a20:	54400000 	.word	0x54400000
 8003a24:	3ff921fb 	.word	0x3ff921fb
 8003a28:	1a626331 	.word	0x1a626331
 8003a2c:	3dd0b461 	.word	0x3dd0b461
 8003a30:	1a600000 	.word	0x1a600000
 8003a34:	3dd0b461 	.word	0x3dd0b461
 8003a38:	2e037073 	.word	0x2e037073
 8003a3c:	3ba3198a 	.word	0x3ba3198a
 8003a40:	6dc9c883 	.word	0x6dc9c883
 8003a44:	3fe45f30 	.word	0x3fe45f30
 8003a48:	2e000000 	.word	0x2e000000
 8003a4c:	3ba3198a 	.word	0x3ba3198a
 8003a50:	252049c1 	.word	0x252049c1
 8003a54:	397b839a 	.word	0x397b839a
 8003a58:	3fe921fb 	.word	0x3fe921fb
 8003a5c:	4002d97b 	.word	0x4002d97b
 8003a60:	3ff921fb 	.word	0x3ff921fb
 8003a64:	413921fb 	.word	0x413921fb
 8003a68:	3fe00000 	.word	0x3fe00000
 8003a6c:	08004788 	.word	0x08004788
 8003a70:	7fefffff 	.word	0x7fefffff
 8003a74:	ea4f 552a 	mov.w	r5, sl, asr #20
 8003a78:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8003a7c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8003a80:	460f      	mov	r7, r1
 8003a82:	4606      	mov	r6, r0
 8003a84:	f7fc ffba 	bl	80009fc <__aeabi_d2iz>
 8003a88:	f7fc fcb4 	bl	80003f4 <__aeabi_i2d>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4630      	mov	r0, r6
 8003a92:	4639      	mov	r1, r7
 8003a94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003a98:	f7fc fb5e 	bl	8000158 <__aeabi_dsub>
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <__ieee754_rem_pio2+0x3d8>)
 8003aa0:	f7fc fd12 	bl	80004c8 <__aeabi_dmul>
 8003aa4:	460f      	mov	r7, r1
 8003aa6:	4606      	mov	r6, r0
 8003aa8:	f7fc ffa8 	bl	80009fc <__aeabi_d2iz>
 8003aac:	f7fc fca2 	bl	80003f4 <__aeabi_i2d>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	4639      	mov	r1, r7
 8003ab8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003abc:	f7fc fb4c 	bl	8000158 <__aeabi_dsub>
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <__ieee754_rem_pio2+0x3d8>)
 8003ac4:	f7fc fd00 	bl	80004c8 <__aeabi_dmul>
 8003ac8:	f04f 0803 	mov.w	r8, #3
 8003acc:	2600      	movs	r6, #0
 8003ace:	2700      	movs	r7, #0
 8003ad0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003ad4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8003ad8:	4632      	mov	r2, r6
 8003ada:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8003ade:	463b      	mov	r3, r7
 8003ae0:	46c2      	mov	sl, r8
 8003ae2:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ae6:	f7fc ff57 	bl	8000998 <__aeabi_dcmpeq>
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d1f4      	bne.n	8003ad8 <__ieee754_rem_pio2+0x398>
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <__ieee754_rem_pio2+0x3dc>)
 8003af0:	462a      	mov	r2, r5
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	2302      	movs	r3, #2
 8003af6:	4621      	mov	r1, r4
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	a806      	add	r0, sp, #24
 8003afc:	4653      	mov	r3, sl
 8003afe:	f000 f80f 	bl	8003b20 <__kernel_rem_pio2>
 8003b02:	9b04      	ldr	r3, [sp, #16]
 8003b04:	4605      	mov	r5, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f6bf ae51 	bge.w	80037ae <__ieee754_rem_pio2+0x6e>
 8003b0c:	6863      	ldr	r3, [r4, #4]
 8003b0e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003b12:	6063      	str	r3, [r4, #4]
 8003b14:	68e3      	ldr	r3, [r4, #12]
 8003b16:	e707      	b.n	8003928 <__ieee754_rem_pio2+0x1e8>
 8003b18:	41700000 	.word	0x41700000
 8003b1c:	08004808 	.word	0x08004808

08003b20 <__kernel_rem_pio2>:
 8003b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b24:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003b28:	9308      	str	r3, [sp, #32]
 8003b2a:	9101      	str	r1, [sp, #4]
 8003b2c:	4bc0      	ldr	r3, [pc, #768]	; (8003e30 <__kernel_rem_pio2+0x310>)
 8003b2e:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8003b30:	f112 0f14 	cmn.w	r2, #20
 8003b34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b38:	bfa8      	it	ge
 8003b3a:	1ed4      	subge	r4, r2, #3
 8003b3c:	9304      	str	r3, [sp, #16]
 8003b3e:	9b08      	ldr	r3, [sp, #32]
 8003b40:	bfb8      	it	lt
 8003b42:	2400      	movlt	r4, #0
 8003b44:	f103 33ff 	add.w	r3, r3, #4294967295
 8003b48:	9306      	str	r3, [sp, #24]
 8003b4a:	bfa4      	itt	ge
 8003b4c:	2318      	movge	r3, #24
 8003b4e:	fb94 f4f3 	sdivge	r4, r4, r3
 8003b52:	f06f 0317 	mvn.w	r3, #23
 8003b56:	fb04 3303 	mla	r3, r4, r3, r3
 8003b5a:	eb03 0a02 	add.w	sl, r3, r2
 8003b5e:	9a06      	ldr	r2, [sp, #24]
 8003b60:	9b04      	ldr	r3, [sp, #16]
 8003b62:	1aa7      	subs	r7, r4, r2
 8003b64:	eb03 0802 	add.w	r8, r3, r2
 8003b68:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003b6a:	2500      	movs	r5, #0
 8003b6c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003b70:	2200      	movs	r2, #0
 8003b72:	2300      	movs	r3, #0
 8003b74:	9009      	str	r0, [sp, #36]	; 0x24
 8003b76:	ae20      	add	r6, sp, #128	; 0x80
 8003b78:	4545      	cmp	r5, r8
 8003b7a:	dd19      	ble.n	8003bb0 <__kernel_rem_pio2+0x90>
 8003b7c:	9b08      	ldr	r3, [sp, #32]
 8003b7e:	aa20      	add	r2, sp, #128	; 0x80
 8003b80:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003b84:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003b88:	f1c3 0301 	rsb	r3, r3, #1
 8003b8c:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8003b90:	9307      	str	r3, [sp, #28]
 8003b92:	9b07      	ldr	r3, [sp, #28]
 8003b94:	9a04      	ldr	r2, [sp, #16]
 8003b96:	4443      	add	r3, r8
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	db35      	blt.n	8003c08 <__kernel_rem_pio2+0xe8>
 8003b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f1a3 0908 	sub.w	r9, r3, #8
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	462f      	mov	r7, r5
 8003ba8:	2600      	movs	r6, #0
 8003baa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bae:	e01f      	b.n	8003bf0 <__kernel_rem_pio2+0xd0>
 8003bb0:	42ef      	cmn	r7, r5
 8003bb2:	d40b      	bmi.n	8003bcc <__kernel_rem_pio2+0xac>
 8003bb4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003bb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bbc:	f7fc fc1a 	bl	80003f4 <__aeabi_i2d>
 8003bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003bc4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003bc8:	3501      	adds	r5, #1
 8003bca:	e7d5      	b.n	8003b78 <__kernel_rem_pio2+0x58>
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	e7f8      	b.n	8003bc4 <__kernel_rem_pio2+0xa4>
 8003bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bd6:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8003bda:	f7fc fc75 	bl	80004c8 <__aeabi_dmul>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003be6:	f7fc fab9 	bl	800015c <__adddf3>
 8003bea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bee:	3601      	adds	r6, #1
 8003bf0:	9b06      	ldr	r3, [sp, #24]
 8003bf2:	3f08      	subs	r7, #8
 8003bf4:	429e      	cmp	r6, r3
 8003bf6:	ddec      	ble.n	8003bd2 <__kernel_rem_pio2+0xb2>
 8003bf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003bfc:	3508      	adds	r5, #8
 8003bfe:	e8eb 2302 	strd	r2, r3, [fp], #8
 8003c02:	f108 0801 	add.w	r8, r8, #1
 8003c06:	e7c4      	b.n	8003b92 <__kernel_rem_pio2+0x72>
 8003c08:	9b04      	ldr	r3, [sp, #16]
 8003c0a:	aa0c      	add	r2, sp, #48	; 0x30
 8003c0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003c10:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c12:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8003c14:	9f04      	ldr	r7, [sp, #16]
 8003c16:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003c1a:	930a      	str	r3, [sp, #40]	; 0x28
 8003c1c:	463e      	mov	r6, r7
 8003c1e:	ab98      	add	r3, sp, #608	; 0x260
 8003c20:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8003c24:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003c28:	f8cd b008 	str.w	fp, [sp, #8]
 8003c2c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8003c30:	2e00      	cmp	r6, #0
 8003c32:	dc71      	bgt.n	8003d18 <__kernel_rem_pio2+0x1f8>
 8003c34:	4652      	mov	r2, sl
 8003c36:	4620      	mov	r0, r4
 8003c38:	4629      	mov	r1, r5
 8003c3a:	f000 fd01 	bl	8004640 <scalbn>
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003c44:	4604      	mov	r4, r0
 8003c46:	460d      	mov	r5, r1
 8003c48:	f7fc fc3e 	bl	80004c8 <__aeabi_dmul>
 8003c4c:	f000 fc78 	bl	8004540 <floor>
 8003c50:	2200      	movs	r2, #0
 8003c52:	4b78      	ldr	r3, [pc, #480]	; (8003e34 <__kernel_rem_pio2+0x314>)
 8003c54:	f7fc fc38 	bl	80004c8 <__aeabi_dmul>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	4629      	mov	r1, r5
 8003c60:	f7fc fa7a 	bl	8000158 <__aeabi_dsub>
 8003c64:	460d      	mov	r5, r1
 8003c66:	4604      	mov	r4, r0
 8003c68:	f7fc fec8 	bl	80009fc <__aeabi_d2iz>
 8003c6c:	9007      	str	r0, [sp, #28]
 8003c6e:	f7fc fbc1 	bl	80003f4 <__aeabi_i2d>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4620      	mov	r0, r4
 8003c78:	4629      	mov	r1, r5
 8003c7a:	f7fc fa6d 	bl	8000158 <__aeabi_dsub>
 8003c7e:	f1ba 0f00 	cmp.w	sl, #0
 8003c82:	4680      	mov	r8, r0
 8003c84:	4689      	mov	r9, r1
 8003c86:	dd70      	ble.n	8003d6a <__kernel_rem_pio2+0x24a>
 8003c88:	1e7a      	subs	r2, r7, #1
 8003c8a:	ab0c      	add	r3, sp, #48	; 0x30
 8003c8c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003c90:	9c07      	ldr	r4, [sp, #28]
 8003c92:	f1ca 0118 	rsb	r1, sl, #24
 8003c96:	fa40 f301 	asr.w	r3, r0, r1
 8003c9a:	441c      	add	r4, r3
 8003c9c:	408b      	lsls	r3, r1
 8003c9e:	1ac0      	subs	r0, r0, r3
 8003ca0:	ab0c      	add	r3, sp, #48	; 0x30
 8003ca2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003ca6:	f1ca 0317 	rsb	r3, sl, #23
 8003caa:	9407      	str	r4, [sp, #28]
 8003cac:	fa40 f303 	asr.w	r3, r0, r3
 8003cb0:	9302      	str	r3, [sp, #8]
 8003cb2:	9b02      	ldr	r3, [sp, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	dd66      	ble.n	8003d86 <__kernel_rem_pio2+0x266>
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003cbe:	4614      	mov	r4, r2
 8003cc0:	9b07      	ldr	r3, [sp, #28]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	9307      	str	r3, [sp, #28]
 8003cc6:	4297      	cmp	r7, r2
 8003cc8:	f300 809f 	bgt.w	8003e0a <__kernel_rem_pio2+0x2ea>
 8003ccc:	f1ba 0f00 	cmp.w	sl, #0
 8003cd0:	dd07      	ble.n	8003ce2 <__kernel_rem_pio2+0x1c2>
 8003cd2:	f1ba 0f01 	cmp.w	sl, #1
 8003cd6:	f000 80b9 	beq.w	8003e4c <__kernel_rem_pio2+0x32c>
 8003cda:	f1ba 0f02 	cmp.w	sl, #2
 8003cde:	f000 80bf 	beq.w	8003e60 <__kernel_rem_pio2+0x340>
 8003ce2:	9b02      	ldr	r3, [sp, #8]
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d14e      	bne.n	8003d86 <__kernel_rem_pio2+0x266>
 8003ce8:	4642      	mov	r2, r8
 8003cea:	464b      	mov	r3, r9
 8003cec:	2000      	movs	r0, #0
 8003cee:	4952      	ldr	r1, [pc, #328]	; (8003e38 <__kernel_rem_pio2+0x318>)
 8003cf0:	f7fc fa32 	bl	8000158 <__aeabi_dsub>
 8003cf4:	4680      	mov	r8, r0
 8003cf6:	4689      	mov	r9, r1
 8003cf8:	2c00      	cmp	r4, #0
 8003cfa:	d044      	beq.n	8003d86 <__kernel_rem_pio2+0x266>
 8003cfc:	4652      	mov	r2, sl
 8003cfe:	2000      	movs	r0, #0
 8003d00:	494d      	ldr	r1, [pc, #308]	; (8003e38 <__kernel_rem_pio2+0x318>)
 8003d02:	f000 fc9d 	bl	8004640 <scalbn>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4640      	mov	r0, r8
 8003d0c:	4649      	mov	r1, r9
 8003d0e:	f7fc fa23 	bl	8000158 <__aeabi_dsub>
 8003d12:	4680      	mov	r8, r0
 8003d14:	4689      	mov	r9, r1
 8003d16:	e036      	b.n	8003d86 <__kernel_rem_pio2+0x266>
 8003d18:	2200      	movs	r2, #0
 8003d1a:	4b48      	ldr	r3, [pc, #288]	; (8003e3c <__kernel_rem_pio2+0x31c>)
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	4629      	mov	r1, r5
 8003d20:	f7fc fbd2 	bl	80004c8 <__aeabi_dmul>
 8003d24:	f7fc fe6a 	bl	80009fc <__aeabi_d2iz>
 8003d28:	f7fc fb64 	bl	80003f4 <__aeabi_i2d>
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	4b44      	ldr	r3, [pc, #272]	; (8003e40 <__kernel_rem_pio2+0x320>)
 8003d30:	4680      	mov	r8, r0
 8003d32:	4689      	mov	r9, r1
 8003d34:	f7fc fbc8 	bl	80004c8 <__aeabi_dmul>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	4629      	mov	r1, r5
 8003d40:	f7fc fa0a 	bl	8000158 <__aeabi_dsub>
 8003d44:	f7fc fe5a 	bl	80009fc <__aeabi_d2iz>
 8003d48:	9b02      	ldr	r3, [sp, #8]
 8003d4a:	3e01      	subs	r6, #1
 8003d4c:	f843 0b04 	str.w	r0, [r3], #4
 8003d50:	9302      	str	r3, [sp, #8]
 8003d52:	ab70      	add	r3, sp, #448	; 0x1c0
 8003d54:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003d58:	4640      	mov	r0, r8
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	4649      	mov	r1, r9
 8003d60:	f7fc f9fc 	bl	800015c <__adddf3>
 8003d64:	4604      	mov	r4, r0
 8003d66:	460d      	mov	r5, r1
 8003d68:	e762      	b.n	8003c30 <__kernel_rem_pio2+0x110>
 8003d6a:	d105      	bne.n	8003d78 <__kernel_rem_pio2+0x258>
 8003d6c:	1e7b      	subs	r3, r7, #1
 8003d6e:	aa0c      	add	r2, sp, #48	; 0x30
 8003d70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003d74:	15c3      	asrs	r3, r0, #23
 8003d76:	e79b      	b.n	8003cb0 <__kernel_rem_pio2+0x190>
 8003d78:	2200      	movs	r2, #0
 8003d7a:	4b32      	ldr	r3, [pc, #200]	; (8003e44 <__kernel_rem_pio2+0x324>)
 8003d7c:	f7fc fe2a 	bl	80009d4 <__aeabi_dcmpge>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d13f      	bne.n	8003e04 <__kernel_rem_pio2+0x2e4>
 8003d84:	9002      	str	r0, [sp, #8]
 8003d86:	2200      	movs	r2, #0
 8003d88:	2300      	movs	r3, #0
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	f7fc fe03 	bl	8000998 <__aeabi_dcmpeq>
 8003d92:	2800      	cmp	r0, #0
 8003d94:	f000 80b5 	beq.w	8003f02 <__kernel_rem_pio2+0x3e2>
 8003d98:	1e7c      	subs	r4, r7, #1
 8003d9a:	4623      	mov	r3, r4
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	9904      	ldr	r1, [sp, #16]
 8003da0:	428b      	cmp	r3, r1
 8003da2:	da64      	bge.n	8003e6e <__kernel_rem_pio2+0x34e>
 8003da4:	2a00      	cmp	r2, #0
 8003da6:	d078      	beq.n	8003e9a <__kernel_rem_pio2+0x37a>
 8003da8:	ab0c      	add	r3, sp, #48	; 0x30
 8003daa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003dae:	f1aa 0a18 	sub.w	sl, sl, #24
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 80a3 	beq.w	8003efe <__kernel_rem_pio2+0x3de>
 8003db8:	4652      	mov	r2, sl
 8003dba:	2000      	movs	r0, #0
 8003dbc:	491e      	ldr	r1, [pc, #120]	; (8003e38 <__kernel_rem_pio2+0x318>)
 8003dbe:	f000 fc3f 	bl	8004640 <scalbn>
 8003dc2:	46a2      	mov	sl, r4
 8003dc4:	4606      	mov	r6, r0
 8003dc6:	460f      	mov	r7, r1
 8003dc8:	f04f 0800 	mov.w	r8, #0
 8003dcc:	00e3      	lsls	r3, r4, #3
 8003dce:	9306      	str	r3, [sp, #24]
 8003dd0:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8003e3c <__kernel_rem_pio2+0x31c>
 8003dd4:	ab70      	add	r3, sp, #448	; 0x1c0
 8003dd6:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8003dda:	f1ba 0f00 	cmp.w	sl, #0
 8003dde:	f280 80c6 	bge.w	8003f6e <__kernel_rem_pio2+0x44e>
 8003de2:	4627      	mov	r7, r4
 8003de4:	f04f 0800 	mov.w	r8, #0
 8003de8:	2f00      	cmp	r7, #0
 8003dea:	f2c0 80f3 	blt.w	8003fd4 <__kernel_rem_pio2+0x4b4>
 8003dee:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <__kernel_rem_pio2+0x328>)
 8003df0:	f04f 0a00 	mov.w	sl, #0
 8003df4:	461d      	mov	r5, r3
 8003df6:	ab70      	add	r3, sp, #448	; 0x1c0
 8003df8:	f04f 0b00 	mov.w	fp, #0
 8003dfc:	2600      	movs	r6, #0
 8003dfe:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8003e02:	e0d9      	b.n	8003fb8 <__kernel_rem_pio2+0x498>
 8003e04:	2302      	movs	r3, #2
 8003e06:	9302      	str	r3, [sp, #8]
 8003e08:	e756      	b.n	8003cb8 <__kernel_rem_pio2+0x198>
 8003e0a:	f8db 3000 	ldr.w	r3, [fp]
 8003e0e:	b954      	cbnz	r4, 8003e26 <__kernel_rem_pio2+0x306>
 8003e10:	b123      	cbz	r3, 8003e1c <__kernel_rem_pio2+0x2fc>
 8003e12:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003e16:	f8cb 3000 	str.w	r3, [fp]
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	461c      	mov	r4, r3
 8003e1e:	3201      	adds	r2, #1
 8003e20:	f10b 0b04 	add.w	fp, fp, #4
 8003e24:	e74f      	b.n	8003cc6 <__kernel_rem_pio2+0x1a6>
 8003e26:	1acb      	subs	r3, r1, r3
 8003e28:	f8cb 3000 	str.w	r3, [fp]
 8003e2c:	4623      	mov	r3, r4
 8003e2e:	e7f5      	b.n	8003e1c <__kernel_rem_pio2+0x2fc>
 8003e30:	08004950 	.word	0x08004950
 8003e34:	40200000 	.word	0x40200000
 8003e38:	3ff00000 	.word	0x3ff00000
 8003e3c:	3e700000 	.word	0x3e700000
 8003e40:	41700000 	.word	0x41700000
 8003e44:	3fe00000 	.word	0x3fe00000
 8003e48:	08004910 	.word	0x08004910
 8003e4c:	1e7a      	subs	r2, r7, #1
 8003e4e:	ab0c      	add	r3, sp, #48	; 0x30
 8003e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e54:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003e58:	a90c      	add	r1, sp, #48	; 0x30
 8003e5a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003e5e:	e740      	b.n	8003ce2 <__kernel_rem_pio2+0x1c2>
 8003e60:	1e7a      	subs	r2, r7, #1
 8003e62:	ab0c      	add	r3, sp, #48	; 0x30
 8003e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e68:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003e6c:	e7f4      	b.n	8003e58 <__kernel_rem_pio2+0x338>
 8003e6e:	a90c      	add	r1, sp, #48	; 0x30
 8003e70:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	430a      	orrs	r2, r1
 8003e78:	e791      	b.n	8003d9e <__kernel_rem_pio2+0x27e>
 8003e7a:	3401      	adds	r4, #1
 8003e7c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003e80:	2a00      	cmp	r2, #0
 8003e82:	d0fa      	beq.n	8003e7a <__kernel_rem_pio2+0x35a>
 8003e84:	9b08      	ldr	r3, [sp, #32]
 8003e86:	1c7e      	adds	r6, r7, #1
 8003e88:	18fd      	adds	r5, r7, r3
 8003e8a:	ab20      	add	r3, sp, #128	; 0x80
 8003e8c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003e90:	443c      	add	r4, r7
 8003e92:	42b4      	cmp	r4, r6
 8003e94:	da04      	bge.n	8003ea0 <__kernel_rem_pio2+0x380>
 8003e96:	4627      	mov	r7, r4
 8003e98:	e6c0      	b.n	8003c1c <__kernel_rem_pio2+0xfc>
 8003e9a:	2401      	movs	r4, #1
 8003e9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e9e:	e7ed      	b.n	8003e7c <__kernel_rem_pio2+0x35c>
 8003ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ea2:	462f      	mov	r7, r5
 8003ea4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003ea8:	f7fc faa4 	bl	80003f4 <__aeabi_i2d>
 8003eac:	f04f 0b00 	mov.w	fp, #0
 8003eb0:	f04f 0800 	mov.w	r8, #0
 8003eb4:	f04f 0900 	mov.w	r9, #0
 8003eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eba:	e8e7 0102 	strd	r0, r1, [r7], #8
 8003ebe:	3b08      	subs	r3, #8
 8003ec0:	9302      	str	r3, [sp, #8]
 8003ec2:	9b06      	ldr	r3, [sp, #24]
 8003ec4:	459b      	cmp	fp, r3
 8003ec6:	dd07      	ble.n	8003ed8 <__kernel_rem_pio2+0x3b8>
 8003ec8:	ab70      	add	r3, sp, #448	; 0x1c0
 8003eca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003ece:	463d      	mov	r5, r7
 8003ed0:	e9c3 8900 	strd	r8, r9, [r3]
 8003ed4:	3601      	adds	r6, #1
 8003ed6:	e7dc      	b.n	8003e92 <__kernel_rem_pio2+0x372>
 8003ed8:	9902      	ldr	r1, [sp, #8]
 8003eda:	f10b 0b01 	add.w	fp, fp, #1
 8003ede:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8003ee2:	9102      	str	r1, [sp, #8]
 8003ee4:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8003ee8:	f7fc faee 	bl	80004c8 <__aeabi_dmul>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4640      	mov	r0, r8
 8003ef2:	4649      	mov	r1, r9
 8003ef4:	f7fc f932 	bl	800015c <__adddf3>
 8003ef8:	4680      	mov	r8, r0
 8003efa:	4689      	mov	r9, r1
 8003efc:	e7e1      	b.n	8003ec2 <__kernel_rem_pio2+0x3a2>
 8003efe:	3c01      	subs	r4, #1
 8003f00:	e752      	b.n	8003da8 <__kernel_rem_pio2+0x288>
 8003f02:	f1ca 0200 	rsb	r2, sl, #0
 8003f06:	4640      	mov	r0, r8
 8003f08:	4649      	mov	r1, r9
 8003f0a:	f000 fb99 	bl	8004640 <scalbn>
 8003f0e:	2200      	movs	r2, #0
 8003f10:	4ba5      	ldr	r3, [pc, #660]	; (80041a8 <__kernel_rem_pio2+0x688>)
 8003f12:	4604      	mov	r4, r0
 8003f14:	460d      	mov	r5, r1
 8003f16:	f7fc fd5d 	bl	80009d4 <__aeabi_dcmpge>
 8003f1a:	b1f8      	cbz	r0, 8003f5c <__kernel_rem_pio2+0x43c>
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	4ba3      	ldr	r3, [pc, #652]	; (80041ac <__kernel_rem_pio2+0x68c>)
 8003f20:	4620      	mov	r0, r4
 8003f22:	4629      	mov	r1, r5
 8003f24:	f7fc fad0 	bl	80004c8 <__aeabi_dmul>
 8003f28:	f7fc fd68 	bl	80009fc <__aeabi_d2iz>
 8003f2c:	4606      	mov	r6, r0
 8003f2e:	f7fc fa61 	bl	80003f4 <__aeabi_i2d>
 8003f32:	2200      	movs	r2, #0
 8003f34:	4b9c      	ldr	r3, [pc, #624]	; (80041a8 <__kernel_rem_pio2+0x688>)
 8003f36:	f7fc fac7 	bl	80004c8 <__aeabi_dmul>
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	4629      	mov	r1, r5
 8003f40:	4620      	mov	r0, r4
 8003f42:	f7fc f909 	bl	8000158 <__aeabi_dsub>
 8003f46:	f7fc fd59 	bl	80009fc <__aeabi_d2iz>
 8003f4a:	1c7c      	adds	r4, r7, #1
 8003f4c:	ab0c      	add	r3, sp, #48	; 0x30
 8003f4e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8003f52:	f10a 0a18 	add.w	sl, sl, #24
 8003f56:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8003f5a:	e72d      	b.n	8003db8 <__kernel_rem_pio2+0x298>
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	4629      	mov	r1, r5
 8003f60:	f7fc fd4c 	bl	80009fc <__aeabi_d2iz>
 8003f64:	ab0c      	add	r3, sp, #48	; 0x30
 8003f66:	463c      	mov	r4, r7
 8003f68:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8003f6c:	e724      	b.n	8003db8 <__kernel_rem_pio2+0x298>
 8003f6e:	ab0c      	add	r3, sp, #48	; 0x30
 8003f70:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8003f74:	f7fc fa3e 	bl	80003f4 <__aeabi_i2d>
 8003f78:	4632      	mov	r2, r6
 8003f7a:	463b      	mov	r3, r7
 8003f7c:	f7fc faa4 	bl	80004c8 <__aeabi_dmul>
 8003f80:	4642      	mov	r2, r8
 8003f82:	e86b 0102 	strd	r0, r1, [fp], #-8
 8003f86:	464b      	mov	r3, r9
 8003f88:	4630      	mov	r0, r6
 8003f8a:	4639      	mov	r1, r7
 8003f8c:	f7fc fa9c 	bl	80004c8 <__aeabi_dmul>
 8003f90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f94:	4606      	mov	r6, r0
 8003f96:	460f      	mov	r7, r1
 8003f98:	e71f      	b.n	8003dda <__kernel_rem_pio2+0x2ba>
 8003f9a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8003f9e:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8003fa2:	f7fc fa91 	bl	80004c8 <__aeabi_dmul>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4650      	mov	r0, sl
 8003fac:	4659      	mov	r1, fp
 8003fae:	f7fc f8d5 	bl	800015c <__adddf3>
 8003fb2:	4682      	mov	sl, r0
 8003fb4:	468b      	mov	fp, r1
 8003fb6:	3601      	adds	r6, #1
 8003fb8:	9b04      	ldr	r3, [sp, #16]
 8003fba:	429e      	cmp	r6, r3
 8003fbc:	dc01      	bgt.n	8003fc2 <__kernel_rem_pio2+0x4a2>
 8003fbe:	45b0      	cmp	r8, r6
 8003fc0:	daeb      	bge.n	8003f9a <__kernel_rem_pio2+0x47a>
 8003fc2:	ab48      	add	r3, sp, #288	; 0x120
 8003fc4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003fc8:	e9c3 ab00 	strd	sl, fp, [r3]
 8003fcc:	3f01      	subs	r7, #1
 8003fce:	f108 0801 	add.w	r8, r8, #1
 8003fd2:	e709      	b.n	8003de8 <__kernel_rem_pio2+0x2c8>
 8003fd4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	dc09      	bgt.n	8003fee <__kernel_rem_pio2+0x4ce>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	dc34      	bgt.n	8004048 <__kernel_rem_pio2+0x528>
 8003fde:	d05e      	beq.n	800409e <__kernel_rem_pio2+0x57e>
 8003fe0:	9b07      	ldr	r3, [sp, #28]
 8003fe2:	f003 0007 	and.w	r0, r3, #7
 8003fe6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8003fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fee:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d1f5      	bne.n	8003fe0 <__kernel_rem_pio2+0x4c0>
 8003ff4:	9a06      	ldr	r2, [sp, #24]
 8003ff6:	ab48      	add	r3, sp, #288	; 0x120
 8003ff8:	441a      	add	r2, r3
 8003ffa:	4615      	mov	r5, r2
 8003ffc:	4692      	mov	sl, r2
 8003ffe:	46a3      	mov	fp, r4
 8004000:	f1bb 0f00 	cmp.w	fp, #0
 8004004:	dc7a      	bgt.n	80040fc <__kernel_rem_pio2+0x5dc>
 8004006:	46aa      	mov	sl, r5
 8004008:	46a3      	mov	fp, r4
 800400a:	f1bb 0f01 	cmp.w	fp, #1
 800400e:	f300 8094 	bgt.w	800413a <__kernel_rem_pio2+0x61a>
 8004012:	2700      	movs	r7, #0
 8004014:	463e      	mov	r6, r7
 8004016:	2c01      	cmp	r4, #1
 8004018:	f300 80ae 	bgt.w	8004178 <__kernel_rem_pio2+0x658>
 800401c:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8004020:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8004024:	9b02      	ldr	r3, [sp, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	f040 80b0 	bne.w	800418c <__kernel_rem_pio2+0x66c>
 800402c:	4603      	mov	r3, r0
 800402e:	462a      	mov	r2, r5
 8004030:	9801      	ldr	r0, [sp, #4]
 8004032:	e9c0 2300 	strd	r2, r3, [r0]
 8004036:	4622      	mov	r2, r4
 8004038:	460b      	mov	r3, r1
 800403a:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800403e:	463a      	mov	r2, r7
 8004040:	4633      	mov	r3, r6
 8004042:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004046:	e7cb      	b.n	8003fe0 <__kernel_rem_pio2+0x4c0>
 8004048:	2000      	movs	r0, #0
 800404a:	9a06      	ldr	r2, [sp, #24]
 800404c:	ab48      	add	r3, sp, #288	; 0x120
 800404e:	441a      	add	r2, r3
 8004050:	4615      	mov	r5, r2
 8004052:	46a0      	mov	r8, r4
 8004054:	4601      	mov	r1, r0
 8004056:	f1b8 0f00 	cmp.w	r8, #0
 800405a:	da3c      	bge.n	80040d6 <__kernel_rem_pio2+0x5b6>
 800405c:	9b02      	ldr	r3, [sp, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d040      	beq.n	80040e4 <__kernel_rem_pio2+0x5c4>
 8004062:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8004066:	4602      	mov	r2, r0
 8004068:	462b      	mov	r3, r5
 800406a:	9d01      	ldr	r5, [sp, #4]
 800406c:	2601      	movs	r6, #1
 800406e:	e9c5 2300 	strd	r2, r3, [r5]
 8004072:	460b      	mov	r3, r1
 8004074:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004078:	f7fc f86e 	bl	8000158 <__aeabi_dsub>
 800407c:	4684      	mov	ip, r0
 800407e:	460f      	mov	r7, r1
 8004080:	ad48      	add	r5, sp, #288	; 0x120
 8004082:	42b4      	cmp	r4, r6
 8004084:	f105 0508 	add.w	r5, r5, #8
 8004088:	da2e      	bge.n	80040e8 <__kernel_rem_pio2+0x5c8>
 800408a:	9b02      	ldr	r3, [sp, #8]
 800408c:	b10b      	cbz	r3, 8004092 <__kernel_rem_pio2+0x572>
 800408e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8004092:	4662      	mov	r2, ip
 8004094:	463b      	mov	r3, r7
 8004096:	9901      	ldr	r1, [sp, #4]
 8004098:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800409c:	e7a0      	b.n	8003fe0 <__kernel_rem_pio2+0x4c0>
 800409e:	9a06      	ldr	r2, [sp, #24]
 80040a0:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80040a2:	ab48      	add	r3, sp, #288	; 0x120
 80040a4:	441a      	add	r2, r3
 80040a6:	4615      	mov	r5, r2
 80040a8:	4637      	mov	r7, r6
 80040aa:	2c00      	cmp	r4, #0
 80040ac:	da09      	bge.n	80040c2 <__kernel_rem_pio2+0x5a2>
 80040ae:	9b02      	ldr	r3, [sp, #8]
 80040b0:	b10b      	cbz	r3, 80040b6 <__kernel_rem_pio2+0x596>
 80040b2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80040b6:	4632      	mov	r2, r6
 80040b8:	463b      	mov	r3, r7
 80040ba:	9901      	ldr	r1, [sp, #4]
 80040bc:	e9c1 2300 	strd	r2, r3, [r1]
 80040c0:	e78e      	b.n	8003fe0 <__kernel_rem_pio2+0x4c0>
 80040c2:	4630      	mov	r0, r6
 80040c4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80040c8:	4639      	mov	r1, r7
 80040ca:	f7fc f847 	bl	800015c <__adddf3>
 80040ce:	3c01      	subs	r4, #1
 80040d0:	4606      	mov	r6, r0
 80040d2:	460f      	mov	r7, r1
 80040d4:	e7e9      	b.n	80040aa <__kernel_rem_pio2+0x58a>
 80040d6:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80040da:	f7fc f83f 	bl	800015c <__adddf3>
 80040de:	f108 38ff 	add.w	r8, r8, #4294967295
 80040e2:	e7b8      	b.n	8004056 <__kernel_rem_pio2+0x536>
 80040e4:	460d      	mov	r5, r1
 80040e6:	e7be      	b.n	8004066 <__kernel_rem_pio2+0x546>
 80040e8:	4660      	mov	r0, ip
 80040ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80040ee:	4639      	mov	r1, r7
 80040f0:	f7fc f834 	bl	800015c <__adddf3>
 80040f4:	3601      	adds	r6, #1
 80040f6:	4684      	mov	ip, r0
 80040f8:	460f      	mov	r7, r1
 80040fa:	e7c2      	b.n	8004082 <__kernel_rem_pio2+0x562>
 80040fc:	e9da 6700 	ldrd	r6, r7, [sl]
 8004100:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8004104:	4632      	mov	r2, r6
 8004106:	463b      	mov	r3, r7
 8004108:	4640      	mov	r0, r8
 800410a:	4649      	mov	r1, r9
 800410c:	f7fc f826 	bl	800015c <__adddf3>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004118:	4640      	mov	r0, r8
 800411a:	4649      	mov	r1, r9
 800411c:	f7fc f81c 	bl	8000158 <__aeabi_dsub>
 8004120:	4632      	mov	r2, r6
 8004122:	463b      	mov	r3, r7
 8004124:	f7fc f81a 	bl	800015c <__adddf3>
 8004128:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800412c:	e86a 0102 	strd	r0, r1, [sl], #-8
 8004130:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004134:	e9ca 2300 	strd	r2, r3, [sl]
 8004138:	e762      	b.n	8004000 <__kernel_rem_pio2+0x4e0>
 800413a:	e9da 8900 	ldrd	r8, r9, [sl]
 800413e:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8004142:	4642      	mov	r2, r8
 8004144:	464b      	mov	r3, r9
 8004146:	4630      	mov	r0, r6
 8004148:	4639      	mov	r1, r7
 800414a:	f7fc f807 	bl	800015c <__adddf3>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004156:	4630      	mov	r0, r6
 8004158:	4639      	mov	r1, r7
 800415a:	f7fb fffd 	bl	8000158 <__aeabi_dsub>
 800415e:	4642      	mov	r2, r8
 8004160:	464b      	mov	r3, r9
 8004162:	f7fb fffb 	bl	800015c <__adddf3>
 8004166:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800416a:	e86a 0102 	strd	r0, r1, [sl], #-8
 800416e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004172:	e9ca 2300 	strd	r2, r3, [sl]
 8004176:	e748      	b.n	800400a <__kernel_rem_pio2+0x4ea>
 8004178:	4638      	mov	r0, r7
 800417a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800417e:	4631      	mov	r1, r6
 8004180:	f7fb ffec 	bl	800015c <__adddf3>
 8004184:	3c01      	subs	r4, #1
 8004186:	4607      	mov	r7, r0
 8004188:	460e      	mov	r6, r1
 800418a:	e744      	b.n	8004016 <__kernel_rem_pio2+0x4f6>
 800418c:	9b01      	ldr	r3, [sp, #4]
 800418e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004192:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8004196:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800419a:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800419e:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80041a2:	601d      	str	r5, [r3, #0]
 80041a4:	615e      	str	r6, [r3, #20]
 80041a6:	e71b      	b.n	8003fe0 <__kernel_rem_pio2+0x4c0>
 80041a8:	41700000 	.word	0x41700000
 80041ac:	3e700000 	.word	0x3e700000

080041b0 <__kernel_tan>:
 80041b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b4:	461f      	mov	r7, r3
 80041b6:	4bda      	ldr	r3, [pc, #872]	; (8004520 <__kernel_tan+0x370>)
 80041b8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80041bc:	b089      	sub	sp, #36	; 0x24
 80041be:	429e      	cmp	r6, r3
 80041c0:	4604      	mov	r4, r0
 80041c2:	460d      	mov	r5, r1
 80041c4:	4682      	mov	sl, r0
 80041c6:	468b      	mov	fp, r1
 80041c8:	4690      	mov	r8, r2
 80041ca:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 80041ce:	9105      	str	r1, [sp, #20]
 80041d0:	dc21      	bgt.n	8004216 <__kernel_tan+0x66>
 80041d2:	f7fc fc13 	bl	80009fc <__aeabi_d2iz>
 80041d6:	2800      	cmp	r0, #0
 80041d8:	d140      	bne.n	800425c <__kernel_tan+0xac>
 80041da:	f109 0301 	add.w	r3, r9, #1
 80041de:	4323      	orrs	r3, r4
 80041e0:	4333      	orrs	r3, r6
 80041e2:	4622      	mov	r2, r4
 80041e4:	d110      	bne.n	8004208 <__kernel_tan+0x58>
 80041e6:	4620      	mov	r0, r4
 80041e8:	4629      	mov	r1, r5
 80041ea:	f000 f9a5 	bl	8004538 <fabs>
 80041ee:	4602      	mov	r2, r0
 80041f0:	2000      	movs	r0, #0
 80041f2:	460b      	mov	r3, r1
 80041f4:	49cb      	ldr	r1, [pc, #812]	; (8004524 <__kernel_tan+0x374>)
 80041f6:	f7fc fa91 	bl	800071c <__aeabi_ddiv>
 80041fa:	4682      	mov	sl, r0
 80041fc:	468b      	mov	fp, r1
 80041fe:	4650      	mov	r0, sl
 8004200:	4659      	mov	r1, fp
 8004202:	b009      	add	sp, #36	; 0x24
 8004204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004208:	f1b9 0f01 	cmp.w	r9, #1
 800420c:	d0f7      	beq.n	80041fe <__kernel_tan+0x4e>
 800420e:	462b      	mov	r3, r5
 8004210:	2000      	movs	r0, #0
 8004212:	49c5      	ldr	r1, [pc, #788]	; (8004528 <__kernel_tan+0x378>)
 8004214:	e7ef      	b.n	80041f6 <__kernel_tan+0x46>
 8004216:	4bc5      	ldr	r3, [pc, #788]	; (800452c <__kernel_tan+0x37c>)
 8004218:	429e      	cmp	r6, r3
 800421a:	dd1f      	ble.n	800425c <__kernel_tan+0xac>
 800421c:	2900      	cmp	r1, #0
 800421e:	da04      	bge.n	800422a <__kernel_tan+0x7a>
 8004220:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004224:	469b      	mov	fp, r3
 8004226:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800422a:	4652      	mov	r2, sl
 800422c:	a19e      	add	r1, pc, #632	; (adr r1, 80044a8 <__kernel_tan+0x2f8>)
 800422e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004232:	465b      	mov	r3, fp
 8004234:	f7fb ff90 	bl	8000158 <__aeabi_dsub>
 8004238:	4604      	mov	r4, r0
 800423a:	460d      	mov	r5, r1
 800423c:	a19c      	add	r1, pc, #624	; (adr r1, 80044b0 <__kernel_tan+0x300>)
 800423e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004242:	4642      	mov	r2, r8
 8004244:	463b      	mov	r3, r7
 8004246:	f7fb ff87 	bl	8000158 <__aeabi_dsub>
 800424a:	4622      	mov	r2, r4
 800424c:	462b      	mov	r3, r5
 800424e:	f7fb ff85 	bl	800015c <__adddf3>
 8004252:	f04f 0800 	mov.w	r8, #0
 8004256:	4682      	mov	sl, r0
 8004258:	468b      	mov	fp, r1
 800425a:	4647      	mov	r7, r8
 800425c:	4652      	mov	r2, sl
 800425e:	465b      	mov	r3, fp
 8004260:	4650      	mov	r0, sl
 8004262:	4659      	mov	r1, fp
 8004264:	f7fc f930 	bl	80004c8 <__aeabi_dmul>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	e9cd 2300 	strd	r2, r3, [sp]
 8004270:	f7fc f92a 	bl	80004c8 <__aeabi_dmul>
 8004274:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004278:	4604      	mov	r4, r0
 800427a:	460d      	mov	r5, r1
 800427c:	4650      	mov	r0, sl
 800427e:	4659      	mov	r1, fp
 8004280:	f7fc f922 	bl	80004c8 <__aeabi_dmul>
 8004284:	a38c      	add	r3, pc, #560	; (adr r3, 80044b8 <__kernel_tan+0x308>)
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800428e:	4620      	mov	r0, r4
 8004290:	4629      	mov	r1, r5
 8004292:	f7fc f919 	bl	80004c8 <__aeabi_dmul>
 8004296:	a38a      	add	r3, pc, #552	; (adr r3, 80044c0 <__kernel_tan+0x310>)
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	f7fb ff5e 	bl	800015c <__adddf3>
 80042a0:	4622      	mov	r2, r4
 80042a2:	462b      	mov	r3, r5
 80042a4:	f7fc f910 	bl	80004c8 <__aeabi_dmul>
 80042a8:	a387      	add	r3, pc, #540	; (adr r3, 80044c8 <__kernel_tan+0x318>)
 80042aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ae:	f7fb ff55 	bl	800015c <__adddf3>
 80042b2:	4622      	mov	r2, r4
 80042b4:	462b      	mov	r3, r5
 80042b6:	f7fc f907 	bl	80004c8 <__aeabi_dmul>
 80042ba:	a385      	add	r3, pc, #532	; (adr r3, 80044d0 <__kernel_tan+0x320>)
 80042bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c0:	f7fb ff4c 	bl	800015c <__adddf3>
 80042c4:	4622      	mov	r2, r4
 80042c6:	462b      	mov	r3, r5
 80042c8:	f7fc f8fe 	bl	80004c8 <__aeabi_dmul>
 80042cc:	a382      	add	r3, pc, #520	; (adr r3, 80044d8 <__kernel_tan+0x328>)
 80042ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d2:	f7fb ff43 	bl	800015c <__adddf3>
 80042d6:	4622      	mov	r2, r4
 80042d8:	462b      	mov	r3, r5
 80042da:	f7fc f8f5 	bl	80004c8 <__aeabi_dmul>
 80042de:	a380      	add	r3, pc, #512	; (adr r3, 80044e0 <__kernel_tan+0x330>)
 80042e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e4:	f7fb ff3a 	bl	800015c <__adddf3>
 80042e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042ec:	f7fc f8ec 	bl	80004c8 <__aeabi_dmul>
 80042f0:	a37d      	add	r3, pc, #500	; (adr r3, 80044e8 <__kernel_tan+0x338>)
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80042fa:	4620      	mov	r0, r4
 80042fc:	4629      	mov	r1, r5
 80042fe:	f7fc f8e3 	bl	80004c8 <__aeabi_dmul>
 8004302:	a37b      	add	r3, pc, #492	; (adr r3, 80044f0 <__kernel_tan+0x340>)
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	f7fb ff28 	bl	800015c <__adddf3>
 800430c:	4622      	mov	r2, r4
 800430e:	462b      	mov	r3, r5
 8004310:	f7fc f8da 	bl	80004c8 <__aeabi_dmul>
 8004314:	a378      	add	r3, pc, #480	; (adr r3, 80044f8 <__kernel_tan+0x348>)
 8004316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431a:	f7fb ff1f 	bl	800015c <__adddf3>
 800431e:	4622      	mov	r2, r4
 8004320:	462b      	mov	r3, r5
 8004322:	f7fc f8d1 	bl	80004c8 <__aeabi_dmul>
 8004326:	a376      	add	r3, pc, #472	; (adr r3, 8004500 <__kernel_tan+0x350>)
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	f7fb ff16 	bl	800015c <__adddf3>
 8004330:	4622      	mov	r2, r4
 8004332:	462b      	mov	r3, r5
 8004334:	f7fc f8c8 	bl	80004c8 <__aeabi_dmul>
 8004338:	a373      	add	r3, pc, #460	; (adr r3, 8004508 <__kernel_tan+0x358>)
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	f7fb ff0d 	bl	800015c <__adddf3>
 8004342:	4622      	mov	r2, r4
 8004344:	462b      	mov	r3, r5
 8004346:	f7fc f8bf 	bl	80004c8 <__aeabi_dmul>
 800434a:	a371      	add	r3, pc, #452	; (adr r3, 8004510 <__kernel_tan+0x360>)
 800434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004350:	f7fb ff04 	bl	800015c <__adddf3>
 8004354:	4602      	mov	r2, r0
 8004356:	460b      	mov	r3, r1
 8004358:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800435c:	f7fb fefe 	bl	800015c <__adddf3>
 8004360:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004364:	f7fc f8b0 	bl	80004c8 <__aeabi_dmul>
 8004368:	4642      	mov	r2, r8
 800436a:	463b      	mov	r3, r7
 800436c:	f7fb fef6 	bl	800015c <__adddf3>
 8004370:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004374:	f7fc f8a8 	bl	80004c8 <__aeabi_dmul>
 8004378:	4642      	mov	r2, r8
 800437a:	463b      	mov	r3, r7
 800437c:	f7fb feee 	bl	800015c <__adddf3>
 8004380:	a365      	add	r3, pc, #404	; (adr r3, 8004518 <__kernel_tan+0x368>)
 8004382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004386:	4604      	mov	r4, r0
 8004388:	460d      	mov	r5, r1
 800438a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800438e:	f7fc f89b 	bl	80004c8 <__aeabi_dmul>
 8004392:	4622      	mov	r2, r4
 8004394:	462b      	mov	r3, r5
 8004396:	f7fb fee1 	bl	800015c <__adddf3>
 800439a:	460b      	mov	r3, r1
 800439c:	e9cd 0100 	strd	r0, r1, [sp]
 80043a0:	4602      	mov	r2, r0
 80043a2:	4659      	mov	r1, fp
 80043a4:	4650      	mov	r0, sl
 80043a6:	f7fb fed9 	bl	800015c <__adddf3>
 80043aa:	4b60      	ldr	r3, [pc, #384]	; (800452c <__kernel_tan+0x37c>)
 80043ac:	4604      	mov	r4, r0
 80043ae:	429e      	cmp	r6, r3
 80043b0:	460d      	mov	r5, r1
 80043b2:	dd3e      	ble.n	8004432 <__kernel_tan+0x282>
 80043b4:	4648      	mov	r0, r9
 80043b6:	f7fc f81d 	bl	80003f4 <__aeabi_i2d>
 80043ba:	4622      	mov	r2, r4
 80043bc:	4680      	mov	r8, r0
 80043be:	4689      	mov	r9, r1
 80043c0:	462b      	mov	r3, r5
 80043c2:	4620      	mov	r0, r4
 80043c4:	4629      	mov	r1, r5
 80043c6:	f7fc f87f 	bl	80004c8 <__aeabi_dmul>
 80043ca:	4642      	mov	r2, r8
 80043cc:	4606      	mov	r6, r0
 80043ce:	460f      	mov	r7, r1
 80043d0:	464b      	mov	r3, r9
 80043d2:	4620      	mov	r0, r4
 80043d4:	4629      	mov	r1, r5
 80043d6:	f7fb fec1 	bl	800015c <__adddf3>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4630      	mov	r0, r6
 80043e0:	4639      	mov	r1, r7
 80043e2:	f7fc f99b 	bl	800071c <__aeabi_ddiv>
 80043e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043ea:	f7fb feb5 	bl	8000158 <__aeabi_dsub>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4650      	mov	r0, sl
 80043f4:	4659      	mov	r1, fp
 80043f6:	f7fb feaf 	bl	8000158 <__aeabi_dsub>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	f7fb fead 	bl	800015c <__adddf3>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4640      	mov	r0, r8
 8004408:	4649      	mov	r1, r9
 800440a:	f7fb fea5 	bl	8000158 <__aeabi_dsub>
 800440e:	9b05      	ldr	r3, [sp, #20]
 8004410:	4604      	mov	r4, r0
 8004412:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8004416:	f00a 0a02 	and.w	sl, sl, #2
 800441a:	f1ca 0001 	rsb	r0, sl, #1
 800441e:	460d      	mov	r5, r1
 8004420:	f7fb ffe8 	bl	80003f4 <__aeabi_i2d>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4620      	mov	r0, r4
 800442a:	4629      	mov	r1, r5
 800442c:	f7fc f84c 	bl	80004c8 <__aeabi_dmul>
 8004430:	e6e3      	b.n	80041fa <__kernel_tan+0x4a>
 8004432:	f1b9 0f01 	cmp.w	r9, #1
 8004436:	d07b      	beq.n	8004530 <__kernel_tan+0x380>
 8004438:	460f      	mov	r7, r1
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	2000      	movs	r0, #0
 8004440:	4939      	ldr	r1, [pc, #228]	; (8004528 <__kernel_tan+0x378>)
 8004442:	f7fc f96b 	bl	800071c <__aeabi_ddiv>
 8004446:	2600      	movs	r6, #0
 8004448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800444c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004450:	4652      	mov	r2, sl
 8004452:	465b      	mov	r3, fp
 8004454:	4630      	mov	r0, r6
 8004456:	4639      	mov	r1, r7
 8004458:	f7fb fe7e 	bl	8000158 <__aeabi_dsub>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004464:	f7fb fe78 	bl	8000158 <__aeabi_dsub>
 8004468:	4632      	mov	r2, r6
 800446a:	462b      	mov	r3, r5
 800446c:	f7fc f82c 	bl	80004c8 <__aeabi_dmul>
 8004470:	4632      	mov	r2, r6
 8004472:	4682      	mov	sl, r0
 8004474:	468b      	mov	fp, r1
 8004476:	462b      	mov	r3, r5
 8004478:	4630      	mov	r0, r6
 800447a:	4639      	mov	r1, r7
 800447c:	f7fc f824 	bl	80004c8 <__aeabi_dmul>
 8004480:	2200      	movs	r2, #0
 8004482:	4b28      	ldr	r3, [pc, #160]	; (8004524 <__kernel_tan+0x374>)
 8004484:	f7fb fe6a 	bl	800015c <__adddf3>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4650      	mov	r0, sl
 800448e:	4659      	mov	r1, fp
 8004490:	f7fb fe64 	bl	800015c <__adddf3>
 8004494:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004498:	f7fc f816 	bl	80004c8 <__aeabi_dmul>
 800449c:	4632      	mov	r2, r6
 800449e:	462b      	mov	r3, r5
 80044a0:	f7fb fe5c 	bl	800015c <__adddf3>
 80044a4:	e6a9      	b.n	80041fa <__kernel_tan+0x4a>
 80044a6:	bf00      	nop
 80044a8:	54442d18 	.word	0x54442d18
 80044ac:	3fe921fb 	.word	0x3fe921fb
 80044b0:	33145c07 	.word	0x33145c07
 80044b4:	3c81a626 	.word	0x3c81a626
 80044b8:	74bf7ad4 	.word	0x74bf7ad4
 80044bc:	3efb2a70 	.word	0x3efb2a70
 80044c0:	32f0a7e9 	.word	0x32f0a7e9
 80044c4:	3f12b80f 	.word	0x3f12b80f
 80044c8:	1a8d1068 	.word	0x1a8d1068
 80044cc:	3f3026f7 	.word	0x3f3026f7
 80044d0:	fee08315 	.word	0xfee08315
 80044d4:	3f57dbc8 	.word	0x3f57dbc8
 80044d8:	e96e8493 	.word	0xe96e8493
 80044dc:	3f8226e3 	.word	0x3f8226e3
 80044e0:	1bb341fe 	.word	0x1bb341fe
 80044e4:	3faba1ba 	.word	0x3faba1ba
 80044e8:	db605373 	.word	0xdb605373
 80044ec:	bef375cb 	.word	0xbef375cb
 80044f0:	a03792a6 	.word	0xa03792a6
 80044f4:	3f147e88 	.word	0x3f147e88
 80044f8:	f2f26501 	.word	0xf2f26501
 80044fc:	3f4344d8 	.word	0x3f4344d8
 8004500:	c9560328 	.word	0xc9560328
 8004504:	3f6d6d22 	.word	0x3f6d6d22
 8004508:	8406d637 	.word	0x8406d637
 800450c:	3f9664f4 	.word	0x3f9664f4
 8004510:	1110fe7a 	.word	0x1110fe7a
 8004514:	3fc11111 	.word	0x3fc11111
 8004518:	55555563 	.word	0x55555563
 800451c:	3fd55555 	.word	0x3fd55555
 8004520:	3e2fffff 	.word	0x3e2fffff
 8004524:	3ff00000 	.word	0x3ff00000
 8004528:	bff00000 	.word	0xbff00000
 800452c:	3fe59427 	.word	0x3fe59427
 8004530:	4682      	mov	sl, r0
 8004532:	468b      	mov	fp, r1
 8004534:	e663      	b.n	80041fe <__kernel_tan+0x4e>
 8004536:	bf00      	nop

08004538 <fabs>:
 8004538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800453c:	4770      	bx	lr
	...

08004540 <floor>:
 8004540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004544:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8004548:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800454c:	2e13      	cmp	r6, #19
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4607      	mov	r7, r0
 8004554:	460c      	mov	r4, r1
 8004556:	4605      	mov	r5, r0
 8004558:	dc34      	bgt.n	80045c4 <floor+0x84>
 800455a:	2e00      	cmp	r6, #0
 800455c:	da15      	bge.n	800458a <floor+0x4a>
 800455e:	a334      	add	r3, pc, #208	; (adr r3, 8004630 <floor+0xf0>)
 8004560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004564:	f7fb fdfa 	bl	800015c <__adddf3>
 8004568:	2200      	movs	r2, #0
 800456a:	2300      	movs	r3, #0
 800456c:	f7fc fa3c 	bl	80009e8 <__aeabi_dcmpgt>
 8004570:	b140      	cbz	r0, 8004584 <floor+0x44>
 8004572:	2c00      	cmp	r4, #0
 8004574:	da59      	bge.n	800462a <floor+0xea>
 8004576:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800457a:	ea57 0503 	orrs.w	r5, r7, r3
 800457e:	d001      	beq.n	8004584 <floor+0x44>
 8004580:	2500      	movs	r5, #0
 8004582:	4c2d      	ldr	r4, [pc, #180]	; (8004638 <floor+0xf8>)
 8004584:	4623      	mov	r3, r4
 8004586:	462f      	mov	r7, r5
 8004588:	e025      	b.n	80045d6 <floor+0x96>
 800458a:	4a2c      	ldr	r2, [pc, #176]	; (800463c <floor+0xfc>)
 800458c:	fa42 f806 	asr.w	r8, r2, r6
 8004590:	ea01 0208 	and.w	r2, r1, r8
 8004594:	4302      	orrs	r2, r0
 8004596:	d01e      	beq.n	80045d6 <floor+0x96>
 8004598:	a325      	add	r3, pc, #148	; (adr r3, 8004630 <floor+0xf0>)
 800459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459e:	f7fb fddd 	bl	800015c <__adddf3>
 80045a2:	2200      	movs	r2, #0
 80045a4:	2300      	movs	r3, #0
 80045a6:	f7fc fa1f 	bl	80009e8 <__aeabi_dcmpgt>
 80045aa:	2800      	cmp	r0, #0
 80045ac:	d0ea      	beq.n	8004584 <floor+0x44>
 80045ae:	2c00      	cmp	r4, #0
 80045b0:	bfbe      	ittt	lt
 80045b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80045b6:	fa43 f606 	asrlt.w	r6, r3, r6
 80045ba:	19a4      	addlt	r4, r4, r6
 80045bc:	2500      	movs	r5, #0
 80045be:	ea24 0408 	bic.w	r4, r4, r8
 80045c2:	e7df      	b.n	8004584 <floor+0x44>
 80045c4:	2e33      	cmp	r6, #51	; 0x33
 80045c6:	dd0a      	ble.n	80045de <floor+0x9e>
 80045c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80045cc:	d103      	bne.n	80045d6 <floor+0x96>
 80045ce:	f7fb fdc5 	bl	800015c <__adddf3>
 80045d2:	4607      	mov	r7, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4638      	mov	r0, r7
 80045d8:	4619      	mov	r1, r3
 80045da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045de:	f04f 32ff 	mov.w	r2, #4294967295
 80045e2:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80045e6:	fa22 f808 	lsr.w	r8, r2, r8
 80045ea:	ea18 0f00 	tst.w	r8, r0
 80045ee:	d0f2      	beq.n	80045d6 <floor+0x96>
 80045f0:	a30f      	add	r3, pc, #60	; (adr r3, 8004630 <floor+0xf0>)
 80045f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f6:	f7fb fdb1 	bl	800015c <__adddf3>
 80045fa:	2200      	movs	r2, #0
 80045fc:	2300      	movs	r3, #0
 80045fe:	f7fc f9f3 	bl	80009e8 <__aeabi_dcmpgt>
 8004602:	2800      	cmp	r0, #0
 8004604:	d0be      	beq.n	8004584 <floor+0x44>
 8004606:	2c00      	cmp	r4, #0
 8004608:	da02      	bge.n	8004610 <floor+0xd0>
 800460a:	2e14      	cmp	r6, #20
 800460c:	d103      	bne.n	8004616 <floor+0xd6>
 800460e:	3401      	adds	r4, #1
 8004610:	ea25 0508 	bic.w	r5, r5, r8
 8004614:	e7b6      	b.n	8004584 <floor+0x44>
 8004616:	2301      	movs	r3, #1
 8004618:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800461c:	fa03 f606 	lsl.w	r6, r3, r6
 8004620:	4435      	add	r5, r6
 8004622:	42bd      	cmp	r5, r7
 8004624:	bf38      	it	cc
 8004626:	18e4      	addcc	r4, r4, r3
 8004628:	e7f2      	b.n	8004610 <floor+0xd0>
 800462a:	2500      	movs	r5, #0
 800462c:	462c      	mov	r4, r5
 800462e:	e7a9      	b.n	8004584 <floor+0x44>
 8004630:	8800759c 	.word	0x8800759c
 8004634:	7e37e43c 	.word	0x7e37e43c
 8004638:	bff00000 	.word	0xbff00000
 800463c:	000fffff 	.word	0x000fffff

08004640 <scalbn>:
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004642:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8004646:	4604      	mov	r4, r0
 8004648:	460d      	mov	r5, r1
 800464a:	4617      	mov	r7, r2
 800464c:	460b      	mov	r3, r1
 800464e:	b996      	cbnz	r6, 8004676 <scalbn+0x36>
 8004650:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004654:	4303      	orrs	r3, r0
 8004656:	d039      	beq.n	80046cc <scalbn+0x8c>
 8004658:	4b35      	ldr	r3, [pc, #212]	; (8004730 <scalbn+0xf0>)
 800465a:	2200      	movs	r2, #0
 800465c:	f7fb ff34 	bl	80004c8 <__aeabi_dmul>
 8004660:	4b34      	ldr	r3, [pc, #208]	; (8004734 <scalbn+0xf4>)
 8004662:	4604      	mov	r4, r0
 8004664:	429f      	cmp	r7, r3
 8004666:	460d      	mov	r5, r1
 8004668:	da0f      	bge.n	800468a <scalbn+0x4a>
 800466a:	a32d      	add	r3, pc, #180	; (adr r3, 8004720 <scalbn+0xe0>)
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	f7fb ff2a 	bl	80004c8 <__aeabi_dmul>
 8004674:	e006      	b.n	8004684 <scalbn+0x44>
 8004676:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800467a:	4296      	cmp	r6, r2
 800467c:	d10a      	bne.n	8004694 <scalbn+0x54>
 800467e:	4602      	mov	r2, r0
 8004680:	f7fb fd6c 	bl	800015c <__adddf3>
 8004684:	4604      	mov	r4, r0
 8004686:	460d      	mov	r5, r1
 8004688:	e020      	b.n	80046cc <scalbn+0x8c>
 800468a:	460b      	mov	r3, r1
 800468c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004690:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8004694:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8004698:	19b9      	adds	r1, r7, r6
 800469a:	4291      	cmp	r1, r2
 800469c:	dd0e      	ble.n	80046bc <scalbn+0x7c>
 800469e:	a322      	add	r3, pc, #136	; (adr r3, 8004728 <scalbn+0xe8>)
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80046a8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80046ac:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80046b0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80046b4:	4820      	ldr	r0, [pc, #128]	; (8004738 <scalbn+0xf8>)
 80046b6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80046ba:	e7d9      	b.n	8004670 <scalbn+0x30>
 80046bc:	2900      	cmp	r1, #0
 80046be:	dd08      	ble.n	80046d2 <scalbn+0x92>
 80046c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80046c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80046c8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80046cc:	4620      	mov	r0, r4
 80046ce:	4629      	mov	r1, r5
 80046d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046d2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80046d6:	da16      	bge.n	8004706 <scalbn+0xc6>
 80046d8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80046dc:	429f      	cmp	r7, r3
 80046de:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80046e2:	dd08      	ble.n	80046f6 <scalbn+0xb6>
 80046e4:	4c15      	ldr	r4, [pc, #84]	; (800473c <scalbn+0xfc>)
 80046e6:	4814      	ldr	r0, [pc, #80]	; (8004738 <scalbn+0xf8>)
 80046e8:	f363 74df 	bfi	r4, r3, #31, #1
 80046ec:	a30e      	add	r3, pc, #56	; (adr r3, 8004728 <scalbn+0xe8>)
 80046ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f2:	4621      	mov	r1, r4
 80046f4:	e7bc      	b.n	8004670 <scalbn+0x30>
 80046f6:	4c12      	ldr	r4, [pc, #72]	; (8004740 <scalbn+0x100>)
 80046f8:	4812      	ldr	r0, [pc, #72]	; (8004744 <scalbn+0x104>)
 80046fa:	f363 74df 	bfi	r4, r3, #31, #1
 80046fe:	a308      	add	r3, pc, #32	; (adr r3, 8004720 <scalbn+0xe0>)
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	e7f5      	b.n	80046f2 <scalbn+0xb2>
 8004706:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800470a:	3136      	adds	r1, #54	; 0x36
 800470c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004710:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8004714:	4620      	mov	r0, r4
 8004716:	4629      	mov	r1, r5
 8004718:	2200      	movs	r2, #0
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <scalbn+0x108>)
 800471c:	e7a8      	b.n	8004670 <scalbn+0x30>
 800471e:	bf00      	nop
 8004720:	c2f8f359 	.word	0xc2f8f359
 8004724:	01a56e1f 	.word	0x01a56e1f
 8004728:	8800759c 	.word	0x8800759c
 800472c:	7e37e43c 	.word	0x7e37e43c
 8004730:	43500000 	.word	0x43500000
 8004734:	ffff3cb0 	.word	0xffff3cb0
 8004738:	8800759c 	.word	0x8800759c
 800473c:	7e37e43c 	.word	0x7e37e43c
 8004740:	01a56e1f 	.word	0x01a56e1f
 8004744:	c2f8f359 	.word	0xc2f8f359
 8004748:	3c900000 	.word	0x3c900000

0800474c <_init>:
 800474c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474e:	bf00      	nop
 8004750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004752:	bc08      	pop	{r3}
 8004754:	469e      	mov	lr, r3
 8004756:	4770      	bx	lr

08004758 <_fini>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	bf00      	nop
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr
